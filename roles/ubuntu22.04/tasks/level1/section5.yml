###5.1.x Configure time-based job schedulers

---

- name: "5.1.1 | PATCH | Ensure cron daemon is enabled and running"
  ansible.builtin.systemd:
      name: cron
      state: started
      enabled: true
  when:
      - ubtu22cis_rule_5_1_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.1
      - cron

- name: "5.1.2 | PATCH | Ensure permissions on /etc/crontab are configured"
  ansible.builtin.file:
      path: /etc/crontab
      owner: root
      group: root
      mode: '0600'
  when:
      - ubtu22cis_rule_5_1_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.2
      - cron

- name: "5.1.3 | PATCH | Ensure permissions on /etc/cron.hourly are configured"
  ansible.builtin.file:
      path: /etc/cron.hourly
      owner: root
      group: root
      mode: '0700'
  when:
      - ubtu22cis_rule_5_1_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.3
      - cron

- name: "5.1.4 | PATCH | Ensure permissions on /etc/cron.daily are configured"
  ansible.builtin.file:
      path: /etc/cron.daily
      owner: root
      group: root
      mode: '0700'
  when:
      - ubtu22cis_rule_5_1_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.4
      - cron

- name: "5.1.5 | PATCH | Ensure permissions on /etc/cron.weekly are configured"
  ansible.builtin.file:
      path: /etc/cron.weekly
      owner: root
      group: root
      mode: '0700'
  when:
      - ubtu22cis_rule_5_1_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.5
      - cron

- name: "5.1.6 | PATCH | Ensure permissions on /etc/cron.monthly are configured"
  ansible.builtin.file:
      path: /etc/cron.monthly
      owner: root
      group: root
      mode: '0700'
  when:
      - ubtu22cis_rule_5_1_6
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.6
      - cron

- name: "5.1.7 | PATCH | Ensure permissions on /etc/cron.d are configured"
  ansible.builtin.file:
      path: /etc/cron.d
      owner: root
      group: root
      mode: '0700'
  when:
      - ubtu22cis_rule_5_1_7
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.7
      - cron

- name: "5.1.8 | PATCH | Ensure cron is restricted to authorized users"
  block:
      - name: "5.1.8 | PATCH | Ensure cron is restricted to authorized users | Remove cron.deny"
        ansible.builtin.file:
            path: /etc/cron.deny
            state: absent

      - name: "5.1.8 | PATCH | Ensure cron is restricted to authorized users | Check for cron.allow"
        ansible.builtin.stat:
            path: /etc/cron.allow
        register: ubtu22cis_5_1_8_status

      - name: "5.1.8 | PATCH | Ensure cron is restricted to authorized users | Create cron.allow if doesn't exist"
        ansible.builtin.file:
            path: /etc/cron.allow
            owner: root
            group: root
            mode: '0640'
            state: touch
        when: not ubtu22cis_5_1_8_status.stat.exists

      - name: "5.1.8 | PATCH | Ensure cron is restricted to authorized users |  Update cron.allow if exists"
        ansible.builtin.file:
            path: /etc/cron.allow
            owner: root
            group: root
            mode: '0640'
        when: ubtu22cis_5_1_8_status.stat.exists
  when:
      - ubtu22cis_rule_5_1_8
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.8
      - cron

- name: "5.1.9 | PATCH | Ensure at is restricted to authorized users"
  block:
      - name: "5.1.9 | PATCH | Ensure at is restricted to authorized users | Remove at.deny"
        ansible.builtin.file:
            path: /etc/at.deny
            state: absent

      - name: "5.1.9 | PATCH | Ensure at is restricted to authorized users | Check for at.allow"
        ansible.builtin.stat:
            path: /etc/at.allow
        register: ubtu22cis_5_1_9_status

      - name: "5.1.9 | PATCH | Ensure at is restricted to authorized users | Create at.allow if doesn't exist"
        ansible.builtin.file:
            path: /etc/at.allow
            owner: root
            group: root
            mode: '0640'
            state: touch
        when: not ubtu22cis_5_1_9_status.stat.exists

      - name: "5.1.9 | PATCH | Ensure at is restricted to authorized users | update at.allow if exists"
        ansible.builtin.file:
            path: /etc/at.allow
            owner: root
            group: root
            mode: '0640'
        when: ubtu22cis_5_1_9_status.stat.exists
  when:
      - ubtu22cis_rule_5_1_9
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.1.9
      - cron

####5.2.x Configure sudo
- name: "5.2.1 | PATCH | Ensure permissions on /etc/ssh/sshd_config are configured"
  ansible.builtin.file:
      path: /etc/ssh/sshd_config
      owner: root
      group: root
      mode: '0600'
  when:
      - ubtu22cis_rule_5_2_1
      - not system_is_container

  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.1
      - ssh

- name: "5.2.2 | PATCH | Ensure permissions on SSH private host key files are configured"
  block:
      - name: "5.2.2 | AUDIT | Ensure permissions on SSH private host key files are configured | Find ssh_host private keys"
        ansible.builtin.find:
            paths: /etc/ssh
            patterns: 'ssh_host_*_key'
        register: ubtu22cis_5_2_2_ssh_host_priv_keys

      - name: "5.2.2 | PATCH | Ensure permissions on SSH private host key files are configured | Set permissions"
        ansible.builtin.file:
            path: "{{ item.path }}"
            owner: root
            group: root
            mode: '0600'
        with_items:
            - "{{ ubtu22cis_5_2_2_ssh_host_priv_keys.files }}"
        loop_control:
            label: "{{ item.path }}"
  when:
      - ubtu22cis_rule_5_2_2
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.2
      - ssh

- name: "5.2.3 | PATCH | Ensure permissions on SSH public host key files are configured"
  block:
      - name: "5.2.3 | AUDIT | Ensure permissions on SSH public host key files are configured | Find ssh_host public keys"
        ansible.builtin.find:
            paths: /etc/ssh
            patterns: 'ssh_host_*_key.pub'
        register: ubtu22cis_5_2_3_ssh_host_pub_keys

      - name: "5.2.3 | PATCH | Ensure permissions on SSH public host key files are configured | Set permissions"
        ansible.builtin.file:
            path: "{{ item.path }}"
            owner: root
            group: root
            mode: '0644'
        with_items:
            - "{{ ubtu22cis_5_2_3_ssh_host_pub_keys.files }}"
        loop_control:
            label: "{{ item.path }}"
  when:
      - ubtu22cis_rule_5_2_3
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.3
      - ssh

- name: "5.2.4 | PATCH | Ensure SSH access is limited"
  block:
      - name: "5.2.4 | PATCH | Ensure SSH access is limited | Add allowed users"
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^AllowUsers|^#AllowUsers'
            line: 'AllowUsers {{ ubtu22cis_sshd.allow_users }}'
            validate: 'sshd -t -f %s'
        notify: Restart sshd
        when: "ubtu22cis_sshd['allow_users']| default('') | length > 0 "

      - name: "5.2.4 | PATCH | Ensure SSH access is limited | Add allowed groups"
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^AllowGroups|^#AllowGroups'
            line: 'AllowGroups {{ ubtu22cis_sshd.allow_groups }}'
            validate: 'sshd -t -f %s'
        notify: Restart sshd
        when: "ubtu22cis_sshd['allow_groups']| default('') | length > 0"

      - name: "5.2.4 | PATCH | Ensure SSH access is limited | Add deny users"
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^DenyUsers|^#DenyUsers'
            line: 'DenyUsers {{ ubtu22cis_sshd.deny_users }} '
            validate: 'sshd -t -f %s'
        notify: Restart sshd
        when: "ubtu22cis_sshd['deny_users']| default('') | length > 0"

      - name: "5.2.4 | PATCH | Ensure SSH access is limited | Add deny groups"
        ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^DenyGroups|^#DenyGroups'
            line: 'DenyGroups {{ ubtu22cis_sshd.deny_groups }}'
            validate: 'sshd -t -f %s'
        notify: Restart sshd
        when: "ubtu22cis_sshd['deny_groups']| default('') | length > 0"
  when:
      - ubtu22cis_rule_5_2_4
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.4
      - ssh

- name: "5.2.5 | PATCH | Ensure SSH LogLevel is appropriate"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^LogLevel|^#LogLevel'
      line: 'LogLevel {{ ubtu22cis_sshd.log_level | default(ubtu22cis_sshd_default_log_level) }}'
      insertafter: '^# Logging'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_5
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.5
      - ssh

- name: "5.2.6 | PATCH | Ensure SSH PAM is enabled"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^UsePAM|^#UsePAM'
      line: 'UsePAM yes'
      insertafter: '^# and ChallengeResponseAuthentication'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_6
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.6
      - ssh
      - pam

- name: "5.2.7 | PATCH | Ensure SSH root login is disabled"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PermitRootLogin|^#PermitRootLogin'
      line: 'PermitRootLogin no'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_7
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.7
      - ssh

- name: "5.2.8 | PATCH | Ensure SSH HostbasedAuthentication is disabled"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^HostbasedAuthentication|^#HostbasedAuthentication'
      line: 'HostbasedAuthentication no'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_8
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.8
      - ssh

- name: "5.2.9 | PATCH | Ensure SSH PermitEmptyPasswords is disabled"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PermitEmptyPasswords|^#PermitEmptyPasswords'
      line: 'PermitEmptyPasswords no'
      insertafter: '# To disable tunneled clear text passwords'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_9
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.9
      - ssh

- name: "5.2.10 | PATCH | Ensure SSH PermitUserEnvironment is disabled"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^PermitUserEnvironment|^#PermitUserEnvironment'
      line: 'PermitUserEnvironment no'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_10
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.10
      - ssh

- name: "5.2.11 | PATCH | Ensure SSH IgnoreRhosts is enabled"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^IgnoreRhosts|^#IgnoreRhosts'
      line: 'IgnoreRhosts yes'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_11
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.11
      - ssh


- name: "5.2.13 | PATCH | Ensure only strong Ciphers are used"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^Ciphers|^#Ciphers'
      line: "Ciphers {{ ubtu22cis_sshd.ciphers | default(ubtu22cis_sshd_default_ciphers) | join(',') }}"
      insertafter: '^# Ciphers and keying'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_13
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.13
      - ssh

- name: "5.2.14 | PATCH | Ensure only strong MAC algorithms are used"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^MACs|^#MACs'
      line: "MACs {{ ubtu22cis_sshd.macs | default(ubtu22cis_sshd_default_macs) | join(',') }}"
      insertafter: '^# Ciphers and keying'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_14
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.14
      - ssh

- name: "5.2.15 | PATCH | Ensure only strong Key Exchange algorithms are used"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^KexAlgorithms|^#KexAlgorithms'
      line: "KexAlgorithms {{ ubtu22cis_sshd.kex_algorithms | default(ubtu22cis_sshd_default_kex_algorithms) | join(',') }}"
      insertafter: '^# Ciphers and keying'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_15
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.15
      - ssh



- name: "5.2.17 | PATCH | Ensure SSH warning banner is configured"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^Banner|^#Banner'
      line: Banner /etc/issue.net
      insertafter: '^# no default banner path'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_17
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.17
      - ssh

- name: "5.2.18 | PATCH | Ensure SSH MaxAuthTries is set to 4 or less"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^MaxAuthTries|^#MaxAuthTries'
      line: 'MaxAuthTries {{ ubtu22cis_sshd.max_auth_tries | default(ubtu22cis_sshd_default_max_auth_tries) }}'
      insertafter: '^# Authentication'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_18
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.18
      - ssh

- name: "5.2.19 | PATCH | Ensure SSH MaxStartups is configured"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^MaxStartups|^#MaxStartups'
      line: 'MaxStartups 10:30:60'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_19
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.19
      - ssh

- name: "5.2.20 | PATCH | Ensure SSH MaxSessions is set to 10 or less"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^MaxSessions|^#MaxSessions'
      line: 'MaxSessions {{ ubtu22cis_sshd.max_sessions | default(ubtu22cis_sshd_default_max_sessions) }}'
      insertafter: '^# Authentication'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_20
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.20
      - ssh

- name: "5.2.21 | PATCH | Ensure SSH LoginGraceTime is set to one minute or less"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: '^LoginGraceTime|^#LoginGraceTime'
      line: 'LoginGraceTime {{ ubtu22cis_sshd.login_grace_time | default(ubtu22cis_sshd_default_login_grace_time) }}'
      insertafter: '^# Authentication'
      validate: 'sshd -t -f %s'
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_21
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.21
      - ssh

- name: "5.2.22 | PATCH | Ensure SSH Idle Timeout Interval is configured"
  ansible.builtin.lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "{{ item.regexp }}"
      line: "{{ item.line }}"
      validate: 'sshd -t -f %s'
  with_items:
      - { regexp: '^ClientAliveInterval|^#ClientAliveInterval', line: 'ClientAliveInterval {{ ubtu22cis_sshd.client_alive_interval | default(ubtu22cis_sshd_default_client_alive_interval) }}' }
      - { regexp: '^ClientAliveCountMax|^#ClientAliveCountMax', line: 'ClientAliveCountMax {{ ubtu22cis_sshd.client_alive_count_max | default(ubtu22cis_sshd_default_client_alive_count_max) }}' }
  notify: Restart sshd
  when:
      - ubtu22cis_rule_5_2_22
      - not system_is_container
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.2.22
      - sshd

###5.3.x Configure SSH Server
- name: "5.3.1 | PATCH | Ensure sudo is installed"
  ansible.builtin.package:
      name: "{{ ubtu22cis_sudo_package }}"
      state: present
  when:
      - ubtu22cis_rule_5_3_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.3.1
      - sudo

- name: "5.3.2 | PATCH | Ensure sudo commands use pty"
  ansible.builtin.lineinfile:
      path: /etc/sudoers
      regexp: '^Defaults\s+use_'
      line: 'Defaults        use_pty'
      insertafter: '^\s*Defaults'
  when:
      - ubtu22cis_rule_5_3_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.3.2
      - sudo

- name: "5.3.3 | PATCH | Ensure sudo log file exists"
  ansible.builtin.lineinfile:
      path: /etc/sudoers
      regexp: '^Defaults\s+logfile'
      line: 'Defaults        logfile="{{ ubtu22cis_sudo_logfile }}"'
      insertafter: '^\s*Defaults'
  when:
      - ubtu22cis_rule_5_3_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.3.3
      - sudo

- name: "PRELIM | PATCH | 5.3.4/5 | Find all sudoers files."
  ansible.builtin.shell: "find /etc/sudoers /etc/sudoers.d/ -type f ! -name '*~' ! -name '*.*'"
  changed_when: false
  failed_when: false
  check_mode: false
  register: ubtu22cis_sudoers_files
  when:
      - ubtu22cis_rule_5_3_4 or
        ubtu22cis_rule_5_3_5
  tags:
      - always


- name: "5.3.5 | PATCH | Ensure re-authentication for privilege escalation is not disabled globally"
  ansible.builtin.replace:
      path: "{{ item }}"
      regexp: '^([^#].*)!authenticate(.*)'
      replace: '\1authenticate\2'
      validate: '/usr/sbin/visudo -cf %s'
  loop: "{{ ubtu22cis_sudoers_files.stdout_lines }}"
  when:
      - ubtu22cis_rule_5_3_5
  tags:
      - level1-server
      - level1-workstation
      - patch
      - sudo
      - rule_5.3.5

- name: "5.3.6 | PATCH | Ensure sudo authentication timeout is configured correctly"
  block:
      - name: "5.3.6 | AUDIT | Ensure sudo authentication timeout is configured correctly | Get files with timeout set"
        ansible.builtin.shell: grep -is 'timestamp_timeout' /etc/sudoers /etc/sudoers.d/* | cut -d":" -f1 | uniq | sort
        changed_when: false
        failed_when: false
        register: ubtu22cis_5_3_6_timeout_files

      - name: "5.3.6 | PATCH | Ensure sudo authentication timeout is configured correctly | Set value if no results"
        ansible.builtin.lineinfile:
            path: /etc/sudoers
            regexp: '^\s*Defaults/s+timestamp_timeout='
            line: "Defaults        timestamp_timeout={{ ubtu22cis_sudo_timestamp_timeout }}"
            insertafter: '^\s*Defaults'
            validate: '/usr/sbin/visudo -cf %s'
        when: ubtu22cis_5_3_6_timeout_files.stdout | length == 0

      - name: "5.3.6 | PATCH | Ensure sudo authentication timeout is configured correctly | Set value if has results"
        ansible.builtin.replace:
            path: "{{ item }}"
            regexp: 'timestamp_timeout=(\d+)'
            replace: "timestamp_timeout={{ ubtu22cis_sudo_timestamp_timeout }}"
            validate: '/usr/sbin/visudo -cf %s'
        loop: "{{ ubtu22cis_5_3_6_timeout_files.stdout_lines }}"
        when: ubtu22cis_5_3_6_timeout_files.stdout | length > 0
  when:
      - ubtu22cis_rule_5_3_6
  tags:
      - level1-server
      - level1-workstation
      - patch
      - sudo
      - rule_5.3.6

- name: "5.3.7 | PATCH | Ensure access to the su command is restricted"
  block:
      - name: "5.3.7 | PATCH | Ensure access to the su command is restricted | Ensure sugroup exists"
        ansible.builtin.group:
            name: "{{ ubtu22cis_sugroup }}"
            state: present
        register: ubtu22cis_5_3_7_sugroup

      - name: "5.3.7 | PATCH | Ensure access to the su command is restricted | remove users from group"
        ansible.builtin.lineinfile:
            path: /etc/group
            regexp: '^{{ ubtu22cis_sugroup }}(:.:.*:).*$'
            line: '{{ ubtu22cis_sugroup }}\g<1>'
            backrefs: true

      - name: "5.3.7 | PATCH | Ensure access to the su command is restricted | Setting pam_wheel to use_uid"
        ansible.builtin.lineinfile:
            path: /etc/pam.d/su
            regexp: '^(#)?auth\s+required\s+pam_wheel\.so'
            line: 'auth           required        pam_wheel.so use_uid group={{ ubtu22cis_sugroup }}'
  when:
      - ubtu22cis_rule_5_3_7
  tags:
      - level1-server
      - level1-workstation
      - patch
      - sudo
      - rule_5.3.7

###5.4.x  User PAM

- name: "5.4.1 | PATCH | Ensure password creation requirements are configured"
  block:
      - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Install pam_pwquality module"
        ansible.builtin.package:
            name: libpam-pwquality
            state: present

      - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Add minlen"
        ansible.builtin.lineinfile:
            path: /etc/security/pwquality.conf
            regexp: '^minlen|^# minlen'
            line: minlen = 14

      - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Add minclass"
        ansible.builtin.lineinfile:
            path: /etc/security/pwquality.conf
            regexp: ^minclass
            line: "minclass = {{ ubtu22cis_pwquality_minclass_value }}"
        when: ubtu22cis_pwquality_minclass

      - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Add extended keys"
        ansible.builtin.lineinfile:
            path: /etc/security/pwquality.conf
            regexp: ^{{ item.key }}
            line: "{{ item.key }} = {{ item.value }}"
        loop: "{{ ubtu22cis_pwquality }}"
        when: not ubtu22cis_pwquality_minclass

      - name: "5.4.1 | AUDIT | Ensure password creation requirements are configured | Confirm pwquality module in common-password"
        ansible.builtin.shell: grep 'password.*requisite.*pam_pwquality.so' /etc/pam.d/common-password
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_5_4_1_pam_pwquality_state

      - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Set retry to 3 if pwquality exists"
        community.general.pamd:
            name: common-password
            type: password
            control: requisite
            module_path: pam_pwquality.so
            module_arguments: 'retry=3'
            state: args_present
        when: ubtu22cis_5_4_1_pam_pwquality_state.stdout | length > 0

      - name: "5.4.1 | PATCH | Ensure password creation requirements are configured | Set retry to 3 if pwquality does not exist"
        community.general.pamd:
            name: common-password
            type: password
            control: required
            module_path: pam_permit.so
            new_type: password
            new_control: requisite
            new_module_path: pam_pwquality.so
            module_arguments: 'retry=3'
            state: after
        when: ubtu22cis_5_4_1_pam_pwquality_state.stdout | length == 0
  when:
      - ubtu22cis_rule_5_4_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.4.1
      - pam

- name: "5.4.2 | AUDIT | Ensure lockout for failed password attempts is configured"
  block:
      - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Check pam faillock is set"
        ansible.builtin.shell: grep -E "preauth|authfail|authsucc" /etc/pam.d/common-auth | grep pam_faillock.so
        register: faillock_state
        failed_when: faillock_state.rc not in [0, 1]
        changed_when: false

      ## Issues have been seen with this control that can't always be replicated
      ## Please ensure you understand what this control is doing before overriding the current settings
      - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Set faillock in common-auth"
        ansible.builtin.replace:
            path: /etc/pam.d/common-auth
            before: .*pam_deny.so
            regexp: .*pam_unix.so nullok
            replace: "{{ ubtu22cis_rule_5_4_2_faillock_config }}"
        when:
            - "'pam_faillock.so' not in faillock_state.stdout"
            - ubtu22cis_allow_common_auth_rewrite

      - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Set faillock common-account"
        ansible.builtin.lineinfile:
            path: /etc/pam.d/common-account
            regexp: '^account\s+required\s+pam_faillock.so'
            line: 'account required              pam_faillock.so'

      - name: "5.4.2 | PATCH | Ensure lockout for failed password attempts is configured | Set pam_deny.so and pam_tally.so"
        ansible.builtin.lineinfile:
            path: /etc/security/faillock.conf
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: '^# end of pam-auth-update config'
            create: true
        loop:
            - { regexp: '^deny', line: 'deny = 4' }
            - { regexp: '^fail_interval', line: 'fail_interval = 900' }
            - { regexp: '^unlock_time', line: 'unlock_time = 600' }
  when:
      - ubtu22cis_rule_5_4_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.4.2
      - pam
      - notimplemented

- name: "5.4.3 | PATCH | Ensure password reuse is limited"
  block:
      - name: "5.4.3 | PATCH | Ensure password reuse is limited | Add pam_unix or edit it accordingly"
        community.general.pamd:
            name: common-password
            type: password
            control: '[success=1 default=ignore]'
            module_path: pam_unix.so
            module_arguments: 'obscure
                yescrypt'
            state: args_present

      - name: "5.4.3 | PATCH | Ensure password reuse is limited| Set remember value after adding pam unix"
        community.general.pamd:
            name: common-password
            type: password
            control: '[success=1 default=ignore]'
            module_path: pam_unix.so
            new_type: password
            new_module_path: pam_pwhistory.so
            new_control: required
            module_arguments: 'use_authtok
                remember={{ ubtu22cis_pamd_pwhistory_remember }}'
            state: before
  when:
      - ubtu22cis_rule_5_4_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.4.3
      - pam

- name: "5.4.4 | PATCH | Ensure password hashing algorithm is up to date with the latest standards"
  block:
      - name: "5.4.4 | AUDIT | Ensure password hashing algorithm is up to date with the latest standards | Confirm pam_unix.so"
        ansible.builtin.shell: grep -v ^# /etc/pam.d/common-password | grep -E "(yescrypt|md5|bigcrypt|sha256|sha512|blowfish)"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_5_4_4_pam_unix_state

      - name: "5.4.4 | PATCH | Ensure password hashing algorithm is up to date with the latest standards | Set hashing if pam_unix.so exists"
        community.general.pamd:
            name: common-password
            type: password
            control: '[success=1 default=ignore]'
            module_path: pam_unix.so
            module_arguments: "{{ ubtu22cis_passwd_hash_algo }}"
            state: "{{ ubtu22cis_passwd_setpam_hash_algo | ternary('args_present', 'args_absent') }}"
        when:
            - ubtu22cis_5_4_4_pam_unix_state.stdout | length > 0

      - name: "5.4.4 | PATCH | Ensure password hashing algorithm is up to date with the latest standards | Set hashing if pam_unix.so does not exist"
        ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: '^ENCRYPT_METHOD'
            line: 'ENCRYPT_METHOD {{ ubtu22cis_passwd_hash_algo }}'
  when:
      - ubtu22cis_rule_5_4_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.4.4
      - pam

- name: "5.4.5 | PATCH | Ensure password hashing algorithm is up to date with the latest standards"
  block:
      - name: "5.4.5 | AUDIT | Ensure all current passwords uses the configured hashing algorithm | capture hash"
        ansible.builtin.shell: cat /etc/shadow | awk -F':' '{print $1" "$2}' | grep -Ev '(!|\*)'
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_5_4_5_passwd_hash_used

      # This is only looking for yescrypt if sha512 need to change the $y$ to $6$
      - name: "5.4.5 | AUDIT | Ensure all current passwords uses the configured hashing algorithm | check has found"
        ansible.builtin.debug:
            msg: "Warning!! Passwords found using not using {{ ubtu22cis_passwd_hash_algo }} algorithm - This required manual intervention"
        when: "' $y$' not in ubtu22cis_5_4_5_passwd_hash_used.stdout"

      - name: "5.4.5 | WARN | Ensure all current passwords uses the configured hashing algorithm | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: "' $y$' not in ubtu22cis_5_4_5_passwd_hash_used.stdout"
  vars:
      warn_control_id: '5.4.5'
  when:
      - ubtu22cis_rule_5_4_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.4.5
      - pam

### 5.5.x User Accounts and Environment
- name: "5.5.1.1 | PATCH | Ensure minimum days between password changes is configured"
  block:
      - name: "5.5.1.1 | PATCH | Ensure minimum days between password changes is configured | Set /etc/login.defs PASS_MIN_DAYS"
        ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: '^PASS_MIN_DAYS|^#PASS_MIN_DAYS'
            line: 'PASS_MIN_DAYS {{ ubtu22cis_pass.min_days }}'

      - name: "5.5.1.1 | PATCH | Ensure minimum days between password changes is configured | Get existing users PASS_MIN_DAYS"
        ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && ($4<{{ ubtu22cis_pass.min_days }})) {print $1}' /etc/shadow"
        changed_when: false
        failed_when: false
        register: ubtu22cis_5_5_1_1_min_days

      - name: "5.5.1.1 | PATCH | Ensure minimum days between password changes is configured | Set existing users PASS_MIN_DAYS"
        ansible.builtin.shell: chage --mindays {{ ubtu22cis_pass.min_days }} {{ item }}
        failed_when: false
        changed_when: ubtu22cis_5_5_1_1_min_days.stdout |length > 0
        loop: "{{ ubtu22cis_5_5_1_1_min_days.stdout_lines }}"
        when:
            - ubtu22cis_disruption_high
            - (item != 'root') or (not ubtu22cis_uses_root)
  when:
      - ubtu22cis_rule_5_5_1_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.1.1
      - user
      - login

- name: "5.5.1.2 | PATCH | Ensure password expiration is 365 days or less"
  block:
      - name: "5.5.1.2 | PATCH | Ensure password expiration is 365 days or less | Set /etc/login.defs PASS_MAX_DAYS"
        ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: '^PASS_MAX_DAYS|^#PASS_MAX_DAYS'
            line: 'PASS_MAX_DAYS {{ ubtu22cis_pass.max_days }}'
            insertafter: '# Password aging controls'

      - name: "5.5.1.2 | PATCH | Ensure password expiration is 365 days or less | Get existing users PASS_MAX_DAYS"
        ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && ($5>{{ ubtu22cis_pass.max_days }} || $5<{{ ubtu22cis_pass.min_days }} || $5 == -1)){print $1}' /etc/shadow"
        changed_when: false
        failed_when: false
        register: ubtu22cis_5_5_1_2_max_days

      - name: "5.5.1.2 | PATCH | Ensure password expiration is 365 days or less | Set existing users PASS_MAX_DAYS"
        ansible.builtin.shell: chage --maxdays {{ ubtu22cis_pass.max_days }} {{ item }}
        failed_when: false
        changed_when: ubtu22cis_5_5_1_2_max_days.stdout | length > 0
        loop: "{{ ubtu22cis_5_5_1_2_max_days.stdout_lines }}"
        when:
            - ubtu22cis_disruption_high
            - (item != 'root') or (not ubtu22cis_uses_root)
  when:
      - ubtu22cis_rule_5_5_1_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.1.2
      - user
      - login

- name: "5.5.1.3 | PATCH | Ensure password expiration warning days is 7 or more"
  block:
      - name: "5.5.1.3 | PATCH | Ensure password expiration warning days is 7 or more | Set /etc/login.defs PASS_WARN_AGE"
        ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: '^PASS_WARN_AGE|^#PASS_WARN_AGE'
            line: 'PASS_WARN_AGE {{ ubtu22cis_pass.warn_age }}'

      - name: "5.5.1.3 | PATCH | Ensure password expiration warning days is 7 or more | Get existing users PASS_WARN_AGE"
        ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && $6<{{ ubtu22cis_pass.warn_age }}){print $1}' /etc/shadow"
        changed_when: false
        failed_when: false
        register: ubtu22cis_5_5_1_3_warn_days

      - name: "5.5.1.3 | PATCH | Ensure password expiration warning days is 7 or more | Set existing users PASS_WARN_AGE"
        ansible.builtin.shell: chage --maxdays {{ ubtu22cis_pass.warn_age }} {{ item }}
        failed_when: false
        changed_when: ubtu22cis_5_5_1_3_warn_days.stdout | length > 0
        loop: "{{ ubtu22cis_5_5_1_3_warn_days.stdout_lines }}"
        when:
            - ubtu22cis_disruption_high
            - (item != 'root') or (not ubtu22cis_uses_root)
  when:
      - ubtu22cis_rule_5_5_1_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.1.3
      - user
      - login

- name: "5.5.1.4 | PATCH | Ensure inactive password lock is 30 days or less"
  block:
      - name: "5.5.1.4 | AUDIT | Ensure inactive password lock is 30 days or less | General setting"
        ansible.builtin.shell: useradd -D | grep INACTIVE | cut -d= -f2
        changed_when: false
        failed_when: false
        register: ubtu22cis_5_5_1_4_inactive_setting

      - name: "5.5.1.4 | PATCH | Ensure inactive password lock is 30 days or less | Set inactive period for new users"
        ansible.builtin.shell: useradd -D -f {{ ubtu22cis_pass.inactive }}
        failed_when: false
        when: ubtu22cis_5_5_1_4_inactive_setting.stdout != ubtu22cis_pass.inactive | string

      - name: "5.5.1.4 | AUDIT | Ensure inactive password lock is 30 days or less | Get Individual users"
        ansible.builtin.shell: "awk -F: '(/^[^:]+:[^!*]/ && ($7~/(\\s*|-1)/ || ( $7>1 && $7<{{ ubtu22cis_pass.inactive }}))) {print $1}' /etc/shadow"
        changed_when: false
        failed_when: false
        register: ubtu22cis_5_5_1_4_inactive_users

      - name: "5.5.1.4 | PATCH | Ensure inactive password lock is 30 days or less | Set inactive period for existing users"
        ansible.builtin.shell: chage --inactive {{ ubtu22cis_pass.inactive }} {{ item }}
        failed_when: false
        with_items:
            - "{{ ubtu22cis_passwd | map(attribute='id') | list | intersect(ubtu22cis_5_5_1_4_inactive_users.stdout_lines) | list }}"
        when:
            - ubtu22cis_disruption_high
            - ubtu22cis_5_5_1_4_inactive_users.stdout | length > 0
            - (item != 'root') and (not ubtu22cis_uses_root)
  when:
      - ubtu22cis_rule_5_5_1_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.1.4
      - user
      - login

- name: "5.5.1.5 | PATCH | Ensure all users last password change date is in the past"
  block:
      - name: "5.5.1.5 | AUDIT | Ensure all users last password change date is in the past | Get current date in Unix Time"
        ansible.builtin.shell: echo $(($(date --utc --date "$1" +%s)/86400))
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_5_5_1_5_current_time

      - name: "5.5.1.5 | AUDIT | Ensure all users last password change date is in the past | Get list of users with last changed PW date in future"
        ansible.builtin.shell: "cat /etc/shadow | awk -F: '{if($3>{{ ubtu22cis_5_5_1_5_current_time.stdout }})print$1}'"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_5_5_1_5_user_list

      - name: "5.5.1.5 | PATCH | Ensure all users last password change date is in the past | Warn about users"
        ansible.builtin.debug:
            msg:
                - "WARNING!! The following accounts have the last PW change date in the future"
                - "{{ ubtu22cis_5_5_1_5_user_list.stdout_lines }}"
        when: ubtu22cis_5_5_1_5_user_list.stdout | length > 0

      - name: "5.5.1.5 | WARN | Ensure all users last password change date is in the past | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_5_5_1_5_user_list.stdout | length > 0

      - name: "5.5.1.5 | PATCH | Ensure all users last password change date is in the past | Lock accounts with future PW changed dates"
        ansible.builtin.shell: passwd --expire {{ item }}
        failed_when: false
        with_items:
            - "{{ ubtu22cis_5_5_1_5_user_list.stdout_lines }}"
        when:
            - ubtu22cis_disruption_high
            - ubtu22cis_5_5_1_5_user_list.stdout | length > 0
  vars:
      warn_control_id: '5.5.1.5'
  when:
      - ubtu22cis_rule_5_5_1_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.1.5
      - user
      - login

- name: "5.5.2 | PATCH | Ensure system accounts are secured"
  block:
      - name: "5.5.2 | PATCH | Ensure system accounts are secured | Set system accounts to login"
        ansible.builtin.user:
            name: "{{ item }}"
            shell: /sbin/nologin
        with_items:
            - "{{ ubtu22cis_passwd | selectattr('uid', '<', 1000) | map(attribute='id') | list }}"
        when:
            - item != "root"
            - item != "sync"
            - item != "shutdown"
            - item != "halt"

      - name: "5.5.2 | PATCH | Ensure system accounts are secured | Lock non-root system accounts"
        ansible.builtin.user:
            name: "{{ item }}"
            password_lock: true
        with_items:
            - "{{ ubtu22cis_passwd | selectattr('uid', '<', 1000) | map(attribute='id') | list }}"
        when:
            - item != "root"
  when:
      - ubtu22cis_rule_5_5_2
      - ubtu22cis_disruption_high
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.2
      - user
      - system

- name: "5.5.3 | PATCH | Ensure default group for the root account is GID 0"
  block:
      - name: "5.5.3 | PATCH | Ensure default group for the root account is GID 0 | Set root group to GUID 0"
        ansible.builtin.group:
            name: root
            gid: 0

      - name: "5.5.3 | PATCH | Ensure default group for the root account is GID 0 | Set root user to root group"
        ansible.builtin.user:
            name: root
            group: root
  when:
      - ubtu22cis_rule_5_5_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.3
      - user
      - system

- name: "5.5.4 | PATCH | Ensure default user umask is 027 or more restrictive"
  block:
      - name: "5.5.4 | AUDIT | Ensure default user umask is 027 or more restrictive"
        ansible.builtin.shell: grep -E '^session\s+optional\s+pam_umask.so' /etc/pam.d/common-session
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_5_5_4_umask_pam_status

      - name: "5.5.4 | PATCH | Ensure default user umask is 027 or more restrictive"
        ansible.builtin.lineinfile:
            path: /etc/pam.d/common-session
            line: 'session optional                        pam_umask.so'
            insertbefore: '^# end of pam-auth-update config'
        when: ubtu22cis_5_5_4_umask_pam_status.stdout | length == 0

      - name: "5.5.4 | PATCH | Ensure default user umask is 027 or more restrictive"
        ansible.builtin.lineinfile:
            path: "{{ item.path }}"
            regexp: '(?i)(umask\s*\d\d\d)'
            line: '{{ item.line }} {{ ubtu22cis_bash_umask }}'
        with_items:
            - { path: '/etc/bash.bashrc', line: 'umask' }
            - { path: '/etc/profile', line: 'umask' }
            - { path: '/etc/login.defs', line: 'UMASK' }

      - name: "5.5.4 | PATCH | Ensure default user umask is 027 or more restrictive"
        ansible.builtin.lineinfile:
            path: /etc/login.defs
            regexp: '^USERGROUPS_ENAB'
            line: USERGROUPS_ENAB no
  when:
      - ubtu22cis_rule_5_5_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.4
      - user

- name: "5.5.5 | PATCH | Ensure default user shell timeout is 900 seconds or less"
  ansible.builtin.blockinfile:
      create: true
      mode: '0644'
      dest: "{{ item.dest }}"
      state: "{{ item.state }}"
      marker: "# {mark} ANSIBLE MANAGED"
      block: |
        # Set session timeout - CIS ID 5.5.5
        # only set TMOUT if it isn't set yet to avoid a shell error
        : ${TMOUT={{ ubtu22cis_shell_session_timeout.timeout }}}
        readonly TMOUT
        export TMOUT
  with_items:
      - { dest: "{{ ubtu22cis_shell_session_timeout.file }}", state: present }
      - { dest: /etc/profile, state: "{{ (ubtu22cis_shell_session_timeout.file == '/etc/profile') | ternary('present', 'absent') }}" }
      - { dest: /etc/bash.bashrc, state: present }
  when:
      - ubtu22cis_rule_5_5_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_5.5.5
      - user

  
#####6.1.x System File Permissions
---

- name: "6.1.1 | PATCH | Ensure permissions on /etc/passwd are configured"
  ansible.builtin.file:
      path: /etc/passwd
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_6_1_1
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.1

- name: "6.1.2 | PATCH | Ensure permissions on /etc/passwd- are configured"
  ansible.builtin.file:
      path: /etc/passwd-
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_6_1_2
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.2

- name: "6.1.3 | PATCH | Ensure permissions on /etc/group are configured"
  ansible.builtin.file:
      path: /etc/group
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_6_1_3
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.3

- name: "6.1.4 | PATCH | Ensure permissions on /etc/group- are configured"
  ansible.builtin.file:
      path: /etc/group-
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_6_1_4
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissionss
      - rule_6.1.4

- name: "6.1.5 | PATCH | Ensure permissions on /etc/shadow are configured"
  ansible.builtin.file:
      path: /etc/shadow
      owner: root
      group: root
      mode: '0640'
  when:
      - ubtu22cis_rule_6_1_5
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.5

- name: "6.1.6 | PATCH | Ensure permissions on /etc/shadow- are configured"
  ansible.builtin.file:
      path: /etc/shadow-
      owner: root
      group: root
      mode: '0640'
  when:
      - ubtu22cis_rule_6_1_6
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.6

- name: "6.1.7 | PATCH | Ensure permissions on /etc/gshadow are configured"
  ansible.builtin.file:
      path: /etc/gshadow
      owner: root
      group: root
      mode: '0640'
  when:
      - ubtu22cis_rule_6_1_7
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.7

- name: "6.1.8 | PATCH | Ensure permissions on /etc/gshadow- are configured"
  ansible.builtin.file:
      path: /etc/gshadow-
      owner: root
      group: root
      mode: '0640'
  when:
      - ubtu22cis_rule_6_1_8
  tags:
      - level1-server
      - level1-workstation
      - patch
      - permissions
      - rule_6.1.8

- name: "6.1.9 | PATCH | Ensure no world writable files exist"
  block:
      - name: "6.1.9 | AUDIT | Ensure no world writable files exist | Get list of world-writable files"
        ansible.builtin.shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002
        failed_when: false
        changed_when: false
        register: rhel_09_6_1_9_perms_results

      - name: "6.1.9 | PATCH | Ensure no world writable files exist | Adjust world-writable files if they exist (Configurable)"
        ansible.builtin.file:
            path: '{{ item }}'
            mode: o-w
            state: touch
        loop: "{{ rhel_09_6_1_9_perms_results.stdout_lines }}"
        when:
            - rhel_09_6_1_9_perms_results.stdout_lines is defined
            - ubtu22cis_no_world_write_adjust
  when:
      - ubtu22cis_rule_6_1_9
  tags:
      - level1-server
      - level1-workstation
      - patch
      - files
      - permissions
      - rule_6.1.9

- name: "6.1.10 | PATCH | Ensure no unowned files or directories exist"
  block:
      - name: "6.1.10 | AUDIT | Ensure no unowned files or directories exist | Get unowned files or directories"
        ansible.builtin.shell: find {{ item.mount }} -xdev -nouser -not -fstype nfs
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_1_10_no_user_items
        with_items:
            - "{{ ansible_facts.mounts }}"
        loop_control:
            label: "{{ item.mount }}"

      - name: "6.1.10 | AUDIT | Ensure no unowned files or directories exist | Flatten no_user_items results for easier use"
        ansible.builtin.set_fact:
            ubtu22cis_6_1_10_no_user_items_flatten: "{{ ubtu22cis_6_1_10_no_user_items.results | map(attribute='stdout_lines') | flatten }}"

      - name: "6.1.10 | AUDIT | Ensure no unowned files or directories exist | Alert on unowned files and directories"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have unowned files and are configured to not auto-remediate for this task"
                - "Please review the files/directories below and assign an owner"
                - "{{ ubtu22cis_6_1_10_no_user_items_flatten }}"
        when:
            - not ubtu22cis_no_owner_adjust
            - ubtu22cis_6_1_10_no_user_items_flatten | length > 0

      - name: "6.1.10 | PATCH | Ensure no unowned files or directories exist | Set unowned files/directories to configured owner"
        ansible.builtin.file:
            path: "{{ item }}"
            owner: "{{ ubtu22cis_unowned_owner }}"
        with_items:
            - "{{ ubtu22cis_6_1_10_no_user_items_flatten }}"
        when:
            - ubtu22cis_no_owner_adjust
            - ubtu22cis_6_1_10_no_user_items_flatten | length > 0

      - name: "6.1.10 | AUDIT | Ensure no unowned files or directories exist | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - not ubtu22cis_no_owner_adjust
            - ubtu22cis_6_1_10_no_user_items_flatten | length > 0
        vars:
            warn_control_id: '6.1.10'
  when:
      - ubtu22cis_rule_6_1_10
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.1.10
      - permissions

- name: "6.1.11 | PATCH | Ensure no ungrouped files or directories exist"
  block:
      - name: "6.1.11 | AUDIT | Ensure no ungrouped files or directories exist | Get ungrouped files or directories"
        ansible.builtin.shell: find {{ item.mount }} -xdev -nogroup -not -fstype nfs
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_1_11_ungrouped_items
        with_items:
            - "{{ ansible_facts.mounts }}"
        loop_control:
            label: "{{ item.mount }}"

      - name: "6.1.11 | AUDIT | Ensure no ungrouped files or directories exist | Flatten ungrouped_items results for easier use"
        ansible.builtin.set_fact:
            ubtu22cis_6_1_11_ungrouped_items_flatten: "{{ ubtu22cis_6_1_11_ungrouped_items.results | map(attribute='stdout_lines') | flatten }}"

      - name: "6.1.11 | AUDIT | Ensure no ungrouped files or directories exist | Alert on ungrouped files and directories"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have ungrouped files/directories and are configured to not auto-remediate for this task"
                - "Please review the files/directories below and assign a group"
                - "{{ ubtu22cis_6_1_11_ungrouped_items_flatten }}"
        when:
            - not ubtu22cis_no_group_adjust
            - ubtu22cis_6_1_11_ungrouped_items_flatten | length > 0

      - name: "6.1.11 | PATCH | Ensure no ungrouped files or directories exist | Set ungrouped files/directories to configured group"
        ansible.builtin.file:
            path: "{{ item }}"
            group: "{{ ubtu22cis_ungrouped_group }}"
        with_items:
            - "{{ ubtu22cis_6_1_11_ungrouped_items_flatten }}"
        when:
            - ubtu22cis_no_group_adjust
            - ubtu22cis_6_1_11_ungrouped_items_flatten | length > 0

      - name: "6.1.11 | AUDIT | Ensure no ungrouped files or directories exist | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - not ubtu22cis_no_group_adjust
            - ubtu22cis_6_1_11_ungrouped_items_flatten | length > 0
        vars:
            warn_control_id: '6.1.11'
  when:
      - ubtu22cis_rule_6_1_11
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.1.11
      - permissions

- name: "6.1.12 | AUDIT | Audit SUID executables"
  block:
      - name: "6.1.12 | AUDIT | Audit SUID executables | Find SUID executables"
        ansible.builtin.shell: find {{ item.mount }} -xdev -type f -perm -4000 -not -fstype nfs
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_1_12_suid_executables
        with_items:
            - "{{ ansible_facts.mounts }}"
        loop_control:
            label: "{{ item.mount }}"

      - name: "6.1.12 | AUDIT | Audit SUID executables | Flatten suid_executables results for easier use"
        ansible.builtin.set_fact:
            ubtu22cis_6_1_12_suid_executables_flatten: "{{ ubtu22cis_6_1_12_suid_executables.results | map(attribute='stdout_lines') | flatten }}"

      - name: "6.1.12 | AUDIT | Audit SUID executables | Alert SUID executables exist"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have SUID executables"
                - "The files are listed below, please confirm the integrity of these binaries"
                - "{{ ubtu22cis_6_1_12_suid_executables_flatten }}"
        when:
            - ubtu22cis_6_1_12_suid_executables_flatten | length > 0
            - not ubtu22cis_suid_adjust

      - name: "6.1.12 | PATCH | Audit SUID executables | Remove SUID bit"
        ansible.builtin.file:
            path: "{{ item }}"
            mode: 'u-s'
        with_items:
            - "{{ ubtu22cis_6_1_12_suid_executables_flatten }}"
        when:
            - ubtu22cis_suid_adjust
            - ubtu22cis_6_1_12_suid_executables_flatten | length > 0

      - name: "6.1.12 | AUDIT | Audit SUID executables | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - ubtu22cis_6_1_12_suid_executables_flatten | length > 0
            - not ubtu22cis_suid_adjust
        vars:
            warn_control_id: '6.1.12'
  when:
      - ubtu22cis_rule_6_1_12
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_6.1.12
      - permissions

- name: "6.1.13 | AUDIT | Audit SGID executables"
  block:
      - name: "6.1.13 | AUDIT | Audit SGID executables | Find SGID executables"
        ansible.builtin.shell: find {{ item }} -xdev -type f -perm -2000 -not -fstype nfs
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_1_13_sgid_executables
        with_items:
            - "{{ ansible_facts.mounts }}"
        loop_control:
            label: "{{ item.mount }}"

      - name: "6.1.13 | AUDIT | Audit SGID executables | Flatten sgid_executables results for easier use"
        ansible.builtin.set_fact:
            ubtu22cis_6_1_13_sgid_executables_flatten: "{{ ubtu22cis_6_1_13_sgid_executables.results | map(attribute='stdout_lines') | flatten }}"

      - name: "6.1.13 | AUDIT | Audit SGID executables | Alert SGID executables exist"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have SGID executables"
                - "The files are listed below, please review the integrity of these binaries"
                - "{{ ubtu22cis_6_1_13_sgid_executables_flatten }}"
        when:
            - ubtu22cis_6_1_13_sgid_executables_flatten | length > 0
            - not ubtu22cis_sgid_adjust

      - name: "6.1.13 | AUDIT | Audit SGID executables | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - ubtu22cis_6_1_13_sgid_executables_flatten | length > 0
            - not ubtu22cis_sgid_adjust

      - name: "6.1.13 | PATCH | Audit SGID executables | Remove SGID bit"
        ansible.builtin.file:
            path: "{{ item }}"
            mode: 'g-s'
        with_items:
            - "{{ ubtu22cis_6_1_13_sgid_executables_flatten }}"
        when:
            - ubtu22cis_sgid_adjust
            - ubtu22cis_6_1_13_sgid_executables_flatten | length > 0
  vars:
      warn_control_id: '6.1.13'
  when:
      - ubtu22cis_rule_6_1_13
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_6.1.13
      - permissions


####6.2.x User and Group Settings
- name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords"
  block:
      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Get users not using shadowed passwords"
        ansible.builtin.shell: awk -F':' '($2 != "x" ) { print $1}' /etc/passwd
        changed_when: false
        failed_when: false
        register: ubtu22cis_6_2_1_nonshadowed_users

      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Warn on findings"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have users that are not using a shadowed password. Please convert the below accounts to use a shadowed password"
                - "{{ ubtu22cis_6_2_1_nonshadowed_users.stdout_lines }}"
        when: ubtu22cis_6_2_1_nonshadowed_users.stdout | length > 0

      - name: "6.2.1 | WARN | Ensure accounts in /etc/passwd use shadowed passwords | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_6_2_1_nonshadowed_users.stdout | length > 0
  vars:
      warn_control_id: '6.2.1'
  when:
      - ubtu22cis_rule_6_2_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.1
      - user_accounts

- name: "6.2.2 | PATCH | Ensure /etc/shadow password fields are not empty"
  block:
      - name: "6.2.2 | AUDIT | Ensure /etc/shadow password fields are not empty | Find users with no password"
        ansible.builtin.shell: awk -F":" '($2 == "" ) { print $1 }' /etc/shadow
        changed_when: false
        check_mode: false
        register: ubtu22cis_6_2_2_empty_password_acct

      - name: "6.2.2 | PATCH | Ensure /etc/shadow password fields are not empty | Lock users with empty password"
        ansible.builtin.user:
            name: "{{ item }}"
            password_lock: true
        with_items:
            - "{{ ubtu22cis_6_2_2_empty_password_acct.stdout_lines }}"
        when: ubtu22cis_6_2_2_empty_password_acct.stdout | length > 0
  when:
      - ubtu22cis_rule_6_2_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.2
      - user
      - permissions

- name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group"
  block:
      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Check /etc/passwd entries"
        ansible.builtin.shell: pwck -r | grep 'no group' | awk '{ gsub("[:\47]",""); print $2}'
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_2_3_passwd_gid_check

      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print message that all groups match between passwd and group files"
        ansible.builtin.debug:
            msg: "Good News! There are no users that have non-existent GUIDs (Groups)"
        when: ubtu22cis_6_2_3_passwd_gid_check.stdout | length == 0

      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print warning about users with invalid GIDs missing GID entries in /etc/group"
        ansible.builtin.debug:
            msg: "Warning!! The following users have non-existent GIDs (Groups): {{ ubtu22cis_6_2_3_passwd_gid_check.stdout_lines | join (', ') }}"
        when: ubtu22cis_6_2_3_passwd_gid_check.stdout | length > 0

      - name: "6.2.3 | WARN | Ensure all groups in /etc/passwd exist in /etc/group | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_6_2_3_passwd_gid_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.3'
  when:
      - ubtu22cis_rule_6_2_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.3
      - groups

- name: "6.2.4 | PATCH | Ensure shadow group is empty"
  block:
      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | check users in group"
        ansible.builtin.getent:
            database: group
            split: ':'
            key: shadow

      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | check users in group"
        ansible.builtin.debug:
            msg: "Warning!! - You have users in the shadow group"
        when: ansible_facts.getent_group.shadow[2] | length > 0

      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | check users in group"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ansible_facts.getent_group.shadow[2] | length > 0
  vars:
      warn_control_id: '6.2.4'
  when:
      - ubtu22cis_rule_6_2_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.4
      - user

- name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist"
  block:
      - name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist | Check for duplicate UIDs"
        ansible.builtin.shell: "pwck -r | awk -F: '{if ($3 in uid) print $1 ; else uid[$3]}' /etc/passwd"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_2_5_user_uid_check

      - name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist | Print warning about users with duplicate UIDs"
        ansible.builtin.debug:
            msg: "Warning!! The following users have UIDs that are duplicates: {{ ubtu22cis_6_2_5_user_uid_check.stdout_lines }}"
        when: ubtu22cis_6_2_5_user_uid_check.stdout | length > 0

      - name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_6_2_5_user_uid_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.5'
  when:
      - ubtu22cis_rule_6_2_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.5
      - user

- name: "PRELIM | PATCH | Install ACL"
  ansible.builtin.package:
      name: acl
      state: present
  when:
      - ubtu22cis_rule_6_2_6
      - "'acl' not in ansible_facts.packages"
  tags:
      - always


- name: "6.2.6 | AUDIT | Ensure no duplicate GIDs exist"
  block:
      - name: "6.2.6 | AUDIT | Ensure no duplicate GIDs exist | Check for duplicate GIDs"
        ansible.builtin.shell: "pwck -r | awk -F: '{if ($3 in users) print $1 ; else users[$3]}' /etc/group"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_2_6_user_user_check

      - name: "6.2.6 | AUDIT | Ensure no duplicate GIDs exist | Print warning about users with duplicate GIDs"
        ansible.builtin.debug:
            msg: "Warning!! The following groups have duplicate GIDs: {{ ubtu22cis_6_2_14_user_user_check.stdout_lines }}"
        when: ubtu22cis_6_2_6_user_user_check.stdout | length > 0

      - name: "6.2.6 | AUDIT | Ensure no duplicate GIDs exist | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_6_2_6_user_user_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.6'
  when:
      - ubtu22cis_rule_6_2_6
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.6
      - groups

- name: "6.2.7 | AUDIT | Ensure no duplicate user names exist"
  block:
      - name: "6.2.7 | AUDIT | Ensure no duplicate user names exist | Check for duplicate User Names"
        ansible.builtin.shell: "pwck -r | awk -F: '{if ($1 in users) print $1 ; else users[$1]}' /etc/passwd"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_2_7_user_username_check

      - name: "6.2.7 | AUDIT | Ensure no duplicate user names exist | Print warning about users with duplicate User Names"
        ansible.builtin.debug:
            msg: "Warning!! The following user names are duplicates: {{ ubtu22cis_6_2_7_user_username_check.stdout_lines }}"
        when: ubtu22cis_6_2_7_user_username_check.stdout | length > 0

      - name: "6.2.7 | AUDIT | Ensure no duplicate user names exist | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_6_2_7_user_username_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.7'
  when:
      - ubtu22cis_rule_6_2_7
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.7
      - user

- name: "6.2.8 | AUDIT | Ensure no duplicate group names exist"
  block:
      - name: "6.2.8 | AUDIT | Ensure no duplicate group names exist | Check for duplicate group names"
        ansible.builtin.shell: 'getent passwd | cut -d: -f1 | sort -n | uniq -d'
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_2_8_group_group_check

      - name: "6.2.8 | AUDIT | Ensure no duplicate group names exist | Print warning about users with duplicate group names"
        ansible.builtin.debug:
            msg: "Warning!! The following group names are duplicates: {{ ubtu22cis_6_2_8_group_group_check.stdout_lines }}"
        when: ubtu22cis_6_2_8_group_group_check.stdout | length > 0

      - name: "6.2.8 | AUDIT | Ensure no duplicate group names exist | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu22cis_6_2_8_group_group_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.8'
  when:
      - ubtu22cis_rule_6_2_8
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.8
      - groups

- name: "6.2.9 | PATCH | Ensure root PATH Integrity"
  block:
      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Get root paths"
        ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2
        changed_when: false
        register: ubtu22cis_6_2_9_root_paths

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Get root paths"
        ansible.builtin.shell: sudo -Hiu root env | grep '^PATH' | cut -d= -f2 | tr ":" "\n"
        changed_when: false
        register: ubtu22cis_6_2_9_root_paths_split

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Set fact"
        ansible.builtin.set_fact:
            root_paths: "{{ ubtu22cis_6_2_9_root_paths.stdout }}"

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Check for empty dirs"
        ansible.builtin.shell: 'echo {{ root_paths }} | grep -q "::" && echo "roots path contains a empty directory (::)"'
        changed_when: false
        failed_when: root_path_empty_dir.rc not in [ 0, 1 ]
        register: root_path_empty_dir

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Check for trailing ':'"
        ansible.builtin.shell: '{{ root_paths }} | cut -d= -f2 | grep -q ":$" && echo "roots path contains a trailing (:)"'
        changed_when: false
        failed_when: root_path_trailing_colon.rc not in [ 0, 1 ]
        register: root_path_trailing_colon

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Check for owner and permissions"
        block:
            - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Check for owner and permissions"
              ansible.builtin.stat:
                  path: "{{ item }}"
              register: root_path_perms
              loop: "{{ ubtu22cis_6_2_9_root_paths_split.stdout_lines }}"

            - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Set permissions"
              ansible.builtin.file:
                  path: "{{ item.stat.path }}"
                  state: directory
                  owner: root
                  group: root
                  mode: '0755'
                  follow: false
              loop: "{{ root_path_perms.results }}"
              loop_control:
                  label: "{{ item }}"
              when:
                  - item.stat.exists
                  - item.stat.isdir
                  - item.stat.pw_name != 'root' or item.stat.gr_name != 'root' or item.stat.woth or item.stat.wgrp
                  - (item != 'root') and (not ubtu22cis_uses_root)

  when:
      - ubtu22cis_rule_6_2_9
  tags:
      - level1-server
      - level1-workstation
      - patch
      - paths
      - rule_6.2.9



- name: "PRELIM | AUDIT | Gather UID 0 accounts other than root"
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: ubtu22cis_uid_zero_accounts_except_root
  when:
      - ubtu22cis_rule_6_2_10
  tags:
      - rule_6.2.10
      - level1-server
      - level1-workstation
      - users
      - always

- name: "6.2.10 | PATCH | Ensure root is the only UID 0 account"
  ansible.builtin.shell: passwd -l {{ item }}
  changed_when: false
  failed_when: false
  loop: "{{ ubtu22cis_uid_zero_accounts_except_root.stdout_lines }}"
  when:
      - ubtu22cis_rule_6_2_10
      - - ubtu22cis_uid_zero_accounts_except_root.rc != 0
  tags:
      - level1-server
      - level1-workstation
      - patch
      - accounts
      - users
      - rule_6.2.10


- name: "PRELIM | AUDIT | Discover Interactive UID MIN and MIN from logins.def"
  block:
      - name: "PRELIM | AUDIT | Capture UID_MIN information from logins.def"
        ansible.builtin.shell: grep -w "^UID_MIN" /etc/login.defs | awk '{print $NF}'
        changed_when: false
        register: uid_min_id

      - name: "PRELIM | AUDIT | Capture UID_MAX information from logins.def"
        ansible.builtin.shell: grep -w "^UID_MAX" /etc/login.defs | awk '{print $NF}'
        changed_when: false
        register: uid_max_id

      - name: "PRELIM | AUDIT | Capture GID_MIN information from logins.def"
        ansible.builtin.shell: grep -w "^GID_MIN" /etc/login.defs | awk '{print $NF}'
        changed_when: false
        register: gid_min_id

      - name: "PRELIM | AUDIT | Set_facts for interactive uid/gid"
        ansible.builtin.set_fact:
            min_int_uid: "{{ uid_min_id.stdout }}"
            max_int_uid: "{{ uid_max_id.stdout }}"
            min_int_gid: "{{ gid_min_id.stdout }}"
  when:
      - not discover_int_uid
  tags:
      - always

- name: "PRELIM | AUDIT | Interactive User accounts"
  ansible.builtin.shell: >
      grep -E -v '^(root|halt|sync|shutdown)' /etc/passwd | awk -F: '(!index($7, "sbin/nologin") && $7 != "/bin/false") { print $6 }'
  changed_when: false
  register: interactive_users_home
  when:
      - ubtu22cis_rule_6_2_11 or
        ubtu22cis_rule_6_2_13 or
        ubtu22cis_rule_6_2_14 or
        ubtu22cis_rule_6_2_15 or
        ubtu22cis_rule_6_2_16
  tags:
      - always


- name: "6.2.11 | PATCH | Ensure local interactive user home directories exist"
  block:
      - name: "6.2.11 | PATCH | Ensure local interactive user home directories exist | Create dir if absent"
        ansible.builtin.file:
            path: "{{ item.dir }}"
            state: directory
            owner: "{{ item.id }}"
            group: "{{ item.gid }}"
        register: ubtu22cis_6_2_11_home_dir
        loop: "{{ ubtu22cis_passwd  | selectattr('uid', '>=', min_int_uid | int ) | selectattr('uid', '<=', max_int_uid | int ) | list }}"
        loop_control:
            label: "{{ item.id }}"

      # set default ACLs so the homedir has an effective umask of 0027
      - name: "6.2.11 | PATCH | Ensure local interactive user home directories exist | Set group ACL"
        ansible.posix.acl:
            path: "{{ item }}"
            default: true
            etype: group
            permissions: rx
            state: present
        loop: "{{ interactive_users_home.stdout_lines }}"
        when: not system_is_container

      - name: "6.2.11 | PATCH | Ensure local interactive user home directories exist | Set other ACL"
        ansible.posix.acl:
            path: "{{ item }}"
            default: true
            etype: other
            permissions: 0
            state: present
        loop: "{{ interactive_users_home.stdout_lines }}"
        when: not system_is_container
  when:
      - ubtu22cis_rule_6_2_11
  tags:
      - level1-server
      - level1-workstation
      - patch
      - users
      - rule_6.2.11

- name: "6.2.12 | PATCH | Ensure local interactive users own their home directories"
  ansible.builtin.file:
      path: "{{ item.dir }}"
      owner: "{{ item.id }}"
      state: directory
  loop: "{{ ubtu22cis_passwd | selectattr('uid', '>=', min_int_uid | int ) | selectattr('uid', '<=', max_int_uid | int ) | list }}"
  loop_control:
      label: "{{ item.id }}"
  when:
      - item.uid >= min_int_uid | int
      - item.id != 'nobody'
      - (item.id != 'tss' and item.dir != '/dev/null')
      - item.shell != '/sbin/nologin'
      - ubtu22cis_rule_6_2_12
  tags:
      - level1-server
      - level1-workstation
      - patch
      - users
      - rule_6.2.12

- name: "6.2.13 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive"
  block:
      - name: "6.2.13 | AUDIT | Ensure local interactive user home directories are mode 750 or more restrictive | get stat"
        ansible.builtin.stat:
            path: "{{ item }}"
        register: rhel_09_6_2_13_home_dir_perms
        loop: "{{ interactive_users_home.stdout_lines }}"

      - name: "6.2.13 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive | amend if needed"
        ansible.builtin.file:
            path: "{{ item.stat.path }}"
            state: directory
            mode: '0750'
        loop: "{{ rhel_09_6_2_13_home_dir_perms.results }}"
        loop_control:
            label: "{{ item }}"
        when:
            - item.stat.mode > '0750'

      # set default ACLs so the homedir has an effective umask of 0027
      - name: "6.2.13 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive | Set group ACL"
        ansible.posix.acl:
            path: "{{ item }}"
            default: true
            etype: group
            permissions: rx
            state: present
        loop: "{{ interactive_users_home.stdout_lines }}"
        when: not system_is_container

      - name: "6.2.13 | PATCH | Ensure local interactive user home directories are mode 750 or more restrictive | Set other ACL"
        ansible.posix.acl:
            path: "{{ item }}"
            default: true
            etype: other
            permissions: 0
            state: present
        loop: "{{ interactive_users_home.stdout_lines }}"
        when: not system_is_container
  when:
      - ubtu22cis_rule_6_2_13
  tags:
      - level1-server
      - level1-workstation
      - patch
      - users
      - permissions
      - rule_6.2.13

- name: "6.2.14 | PATCH | Ensure no interactive users have .netrc files"
  ansible.builtin.file:
      dest: "~{{ item }}/.netrc"
      state: absent
  with_items:
      - "{{ interactive_users_home.stdout_lines }}"
  when:
      - ubtu22cis_rule_6_2_14
      - ubtu22cis_disruption_high
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.14
      - user

- name: "6.2.15 | PATCH | Ensure no interactive users have .forward files"
  ansible.builtin.file:
      dest: "~{{ item }}/.forward"
      state: absent
  with_items:
      - "{{ interactive_users_home.stdout_lines }}"
  when:
      - ubtu22cis_rule_6_2_15
      - ubtu22cis_disruption_high
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.15
      - user

- name: "6.2.16 | PATCH | Ensure no users have .rhosts files"
  ansible.builtin.file:
      dest: "~{{ item }}/.rhosts"
      state: absent
  with_items:
      - "{{ interactive_users_home.stdout_lines }}"
  when:
      - ubtu22cis_rule_6_2_16
      - ubtu22cis_disruption_high
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.16
      - user

- name: "6.2.17 | PATCH | Ensure users' dot files are not group or world writable"
  block:
      - name: "6.2.17 | AUDIT | Ensure users' dot files are not group or world-writable | Check for files"
        ansible.builtin.shell: find /home/ -name "\.*" -perm /g+w,o+w
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_6_2_17_audit

      - name: "6.2.17 | AUDIT | Ensure users' dot files are not group or world-writable | Warning on files found"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have group or world-writable dot files on your system and have configured for manual intervention"
        when:
            - ubtu22cis_6_2_17_audit.stdout | length > 0
            - ubtu22cis_dotperm_ansiblemanaged

      - name: "6.2.17 | PATCH | Ensure users' dot files are not group or world writable | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - ubtu22cis_6_2_17_audit.stdout | length > 0
            - ubtu22cis_dotperm_ansiblemanaged

      - name: "6.2.17 | PATCH | Ensure users' dot files are not group or world-writable | Changes files if configured"
        ansible.builtin.file:
            path: '{{ item }}'
            mode: go-w
        with_items: "{{ ubtu22cis_6_2_17_audit.stdout_lines }}"
        when:
            - ubtu22cis_6_2_17_audit.stdout | length > 0
            - ubtu22cis_dotperm_ansiblemanaged
  vars:
      warn_control_id: '6.2.17'
  when:
      - ubtu22cis_rule_6_2_17
      - ubtu22cis_disruption_high
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.17
      - user

- name: "PRELIM | AUDIT | Gather UID 0 accounts other than root"
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: ubtu22cis_uid_zero_accounts_except_root
  when:
      - ubtu22cis_rule_6_2_18
  tags:
      - rule_6.2.18
      - level1-server
      - level1-workstation
      - users
      - always

---
#####1.1 Filesystem Configuration#######



###1.1.1 Disable unused filesystems
- name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled"
  block:
      - name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled | Edit modprobe config"
        ansible.builtin.lineinfile:
            dest: /etc/modprobe.d/cramfs.conf
            regexp: '^(#)?install cramfs(\\s|$)'
            line: install cramfs /bin/true
            create: true

      - name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist cramfs(\\s|$)"
            line: "blacklist cramfs"
            create: true
            mode: '0600'

      - name: "1.1.1.1 | PATCH | Ensure mounting of cramfs filesystems is disabled | Disable cramfs"
        community.general.modprobe:
            name: cramfs
            state: absent
        when: ansible_connection != 'docker'
  notify: Update_Initramfs
  when:
      - ubtu22cis_rule_1_1_1_1
  tags:
      - level1-server
      - ubtu22cis_level1
      - level1-workstation
      - automated
      - patch
      - rule_1.1.1.1
      - cramfs




#1.1.2.x Ensure separate partition exists for /tmp

- name: "1.1.2.1 | AUDIT | Ensure /tmp is a separate partition"
  block:
      - name: "1.1.2.1 | AUDIT | Ensure /tmp is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.2.1 | WARN | Ensure /tmp is a separate partition | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.1.2.1'
      required_mount: '/tmp'
  when:
      - required_mount not in mount_names
      - ubtu22cis_rule_1_1_2_1
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - audit
      - mounts
      - rule_1.1.2.1
      - tmp

- name: "1.1.2.2 | PATCH | Ensure nodev option set on /tmp partition"
  ansible.builtin.set_fact:
      tmp_partition_mount_options: "{{ tmp_partition_mount_options + [ 'nodev' ] }}"
  changed_when: true
  notify: Writing and remounting tmp
  vars:
      required_mount: '/tmp'
  when:
      - required_mount in mount_names
      - ubtu22cis_rule_1_1_2_2
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.2.2
      - tmp

- name: "1.1.2.3 | PATCH | Ensure noexec option set on /tmp partition"
  ansible.builtin.set_fact:
      tmp_partition_mount_options: "{{ tmp_partition_mount_options + [ 'noexec' ] }}"
  changed_when: true
  notify: Writing and remounting tmp
  vars:
      required_mount: '/tmp'
  when:
      - required_mount in mount_names
      - ubtu22cis_rule_1_1_2_3
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.2.3
      - tmp

- name: "1.1.2.4 | PATCH | Ensure nosuid option set on /tmp partition"
  ansible.builtin.set_fact:
      tmp_partition_mount_options: "{{ tmp_partition_mount_options + [ 'nosuid' ] }}"
  changed_when: true
  notify: Writing and remounting tmp
  vars:
      required_mount: '/tmp'
  when:
      - required_mount in mount_names
      - ubtu22cis_rule_1_1_2_4
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.2.4
      - tmp


###1.1.3.x Ensure separate partition exists for /var

- name: "1.1.3.1 | AUDIT | Ensure /var is a separate partition"
  block:
      - name: "1.1.3.1 | AUDIT | Ensure /var is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.3.1 | WARN | Ensure /var is a separate partition | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.1.3.1'
      required_mount: '/var'
  when:
      - required_mount not in mount_names
      - ubtu22cis_rule_1_1_3_1
  tags:
      - level2-server
      - ubtu22cis_level1
      - level2-workstation
      - automated
      - audit
      - rule_1.1.3.1
      - var



- name: |
    "1.1.3.2 | PATCH | Ensure /var partition includes the nodev option"
    "1.1.3.3 | PATCH | Ensure /var partition includes the nosuid option"
  ansible.posix.mount:
      path: /var
      src: "{{ item.device }}"
      state: present
      fstype: "{{ item.fstype }}"
      opts: defaults,{% if ubtu22cis_rule_1_1_3_2 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_3_3 %}nosuid{% endif %}
  notify: Remount var
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - item.mount == "/var"
      - ubtu22cis_rule_1_1_3_2 or
        ubtu22cis_rule_1_1_3_3
   
  tags:
      - level1-server
      - ubtu22cis_level1
      - level1-workstation
      - automated
      - patch
      - rule_1.1.3.2
      - rule_1.1.3.3
      - var

###1.1.4.x Ensure separate partition exists for /var/tmp



- name: "1.1.4.1 | AUDIT | Ensure /var/tmp is a separate partition"
  block:
      - name: "1.1.4.1 | AUDIT | Ensure /var/tmp is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.4.1 | WARN | Ensure /var/tmp is a separate partition | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.1.4.1'
      required_mount: '/var/tmp'
  when:
      - required_mount not in mount_names
      - ubtu22cis_rule_1_1_4_1
  tags:
      - level2-server
      - ubtu22cis_level1
      - level2-workstation
      - automated
      - audit
      - rule_1.1.4.1
      - var

- name: |
    "1.1.4.2 | PATCH | Ensure /var/tmp partition includes the noexec option"
    "1.1.4.3 | PATCH | Ensure /var/tmp partition includes the nosuid option"
    "1.1.4.4 | PATCH | Ensure /var/tmp partition includes the nodev option"
  ansible.posix.mount:
      path: /var/tmp
      src: "{{ item.device }}"
      state: present
      fstype: "{{ item.fstype }}"
      opts: defaults,{% if ubtu22cis_rule_1_1_4_2 %}noexec,{% endif %}{% if ubtu22cis_rule_1_1_4_3 %}nosuid,{% endif %}{% if ubtu22cis_rule_1_1_4_4 %}nodev{% endif %}
  notify: Remount var_tmp
  with_items: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - item.mount == "/var/tmp"
      - ubtu22cis_rule_1_1_4_2 or
        ubtu22cis_rule_1_1_4_3 or
        ubtu22cis_rule_1_1_4_4
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.4.2
      - rule_1.1.4.3
      - rule_1.1.4.4
      - var

###1.1.5.x Ensure separate partition exists for /var/log

- name: "1.1.5.1 | AUDIT | Ensure /var/log is a separate partition"
  block:
      - name: "1.1.5.1 | AUDIT | Ensure /var/log is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.5.1 | WARN | Ensure /var/log is a separate partition | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.1.5.1'
      required_mount: '/var/log'
  when:
      - required_mount not in mount_names
      - ubtu22cis_rule_1_1_5_1
  tags:
      - level2-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - audit
      - rule_1.1.5.1
      - varlog

- name: |
    "1.1.5.2 | PATCH | Ensure /var/log partition includes the nodev option"
    "1.1.5.3 | PATCH | Ensure /var/log partition includes the noexec option"
    "1.1.5.4 | PATCH | Ensure /var/log partition includes the nosuid option"
  ansible.posix.mount:
      path: /var/log
      src: "{{ item.device }}"
      state: present
      fstype: "{{ item.fstype }}"
      opts: defaults,{% if ubtu22cis_rule_1_1_5_2 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_5_3 %}noexec,{% endif %}{% if ubtu22cis_rule_1_1_5_4 %}nosuid{% endif %}
  notify: Remount var_log
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - item.mount == "/var/log"
      - ubtu22cis_rule_1_1_5_2 or
        ubtu22cis_rule_1_1_5_3 or
        ubtu22cis_rule_1_1_5_4
  tags:
      - level1-server
      - ubtu22cis_level1
      - level1-workstation
      - automated
      - patch
      - rule_1.1.5.2
      - rule_1.1.5.3
      - rule_1.1.5.4
      - varlog


- name: |
    "1.1.5.6| PATCH | Ensure /var/log/audit partition includes the noexec option"
    "1.1.5.7 | PATCH | Ensure /var/log/audit partition includes the nodev option"
    "1.1.5.8 | PATCH | Ensure /var/log/audit partition includes the nosuid option"
  ansible.posix.mount:
      path: /var/log/audit
      src: "{{ item.device }}"
      state: present
      fstype: "{{ item.fstype }}"
      opts: defaults,{% if ubtu22cis_rule_1_1_5_6 %}noexec,{% endif %}{% if ubtu22cis_rule_1_1_5_7 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_5_8 %}nosuid{% endif %}
  notify: Remount var_log_audit
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - item.mount == "/var/log/audit"
      - ubtu22cis_rule_1_1_5_6 or
        ubtu22cis_rule_1_1_5_7 or
        ubtu22cis_rule_1_1_5_8
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.5.6
      - rule_1.1.5.7
      - rule_1.1.5.8
      - varlogaudit


###1.1.6.x Ensure separate partition exists for /homerule_1_1_8

- name: "1.1.6.1 | AUDIT | Ensure /home is a separate partition"
  block:
      - name: "1.1.6.1 | AUDIT | Ensure /home is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.6.1 | WARN | Ensure /home is a separate partition | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.1.6.1'
      required_mount: '/home'
  when:
      - required_mount not in mount_names
      - ubtu22cis_rule_1_1_6_1
  tags:
      - level2-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - audit
      - rule_1.1.6.1
      - home


- name: |
    "1.1.6.2 | PATCH | Ensure /home partition includes the nodev option"
    "1.1.6.3 | PATCH | Ensure /home partition includes the nosuid option"
  ansible.posix.mount:
      path: /home
      src: "{{ item.device }}"
      state: present
      fstype: "{{ item.fstype }}"
      opts: defaults,{% if ubtu22cis_rule_1_1_6_2 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_6_3 %}nosuid,{% endif %}
  notify: Remount home
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - item.mount == "/home"
      - ubtu22cis_rule_1_1_6_2 or
        ubtu22cis_rule_1_1_6_3
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.6.2
      - rule_1.1.6.3
      - home


###1.1.7.x Ensure nodev option set on /dev/shm partition

- name: |
    "1.1.7.1 | PATCH | Ensure nodev option set on /dev/shm partition"
    "1.1.7.2 | PATCH | Ensure nosuid option set on /dev/shm partition"
    "1.1.7.3 | PATCH | Ensure noexec option set on /dev/shm partition"
  ansible.posix.mount:
      path: /dev/shm
      src: /dev/shm
      fstype: tmpfs
      state: present
      opts: "defaults,{% if ubtu22cis_rule_1_1_7_1 %}nodev,{% endif %}{% if ubtu22cis_rule_1_1_7_2 %}nosuid,{% endif %}{% if ubtu22cis_rule_1_1_7_3 %}noexec{% endif %}"
  notify: Remount dev_shm
  when:
      - ubtu22cis_rule_1_1_7_1 or
        ubtu22cis_rule_1_1_7_2 or
        ubtu22cis_rule_1_1_7_3
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.7.1
      - rule_1.1.7.2
      - rule_1.1.7.3
      - dev_shm

###1.1.8 Disable Automounting

- name: "PRELIM | AUDIT | Check for autofs service"
  ansible.builtin.shell: "systemctl show autofs | grep LoadState | cut -d = -f 2"
  register: ubtu22cis_autofs_service_status
  changed_when: false
  check_mode: false
  when:
      - ubtu22cis_rule_1_1_9
  tags:
      - skip_ansible_lint
      - ubtu22cis_level1
      - section1
      - always

- name: "1.1.8 | PATCH | Disable Automounting"
  ansible.builtin.service:
      name: autofs
      state: stopped
      enabled: false
  when:
      - ubtu22cis_rule_1_1_8
      - ubtu22cis_autofs_service_status.stdout == "loaded"
      - not ubtu22cis_allow_autofs
  tags:
      - level1-server
      - ubtu22cis_level1
      - level2-workstation
      - automated
      - patch
      - rule_1.1.8
      - automounting

###1.1.9.x  Disable USB storage

- name: "1.1.9 | PATCH | Disable USB Storage"
  block:
      - name: "1.1.9 | PATCH | Disable USB Storage | Set modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/usb_storage.conf
            regexp: '^install usb-storage'
            line: 'install usb-storage /bin/true'
            create: true

      - name: "1.1.9 | PATCH | Disable USB Storage | Blacklist usb-storage"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            line: 'blacklist usb-storage'
            insertafter: EOF

      - name: "1.1.9 | PATCH | Disable USB Storage | Remove usb-storage module"
        community.general.modprobe:
            name: usb-storage
            state: absent
        when: ansible_connection != 'docker'
  notify: Update_Initramfs
  when:
      - ubtu22cis_rule_1_1_9
      - not ubtu22cis_allow_usb_storage
  tags:
      - level1-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.1.9
      - usb_storage

###1.2.x Configure Software Updates

- name: "1.2.1 | AUDIT | Ensure package manager repositories are configured"
  block:
      - name: "1.2.1 | AUDIT | Ensure package manager repositories are configured | Get repositories"
        ansible.builtin.shell: apt-cache policy
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_1_2_1_apt_policy

      - name: "1.2.1 | AUDIT | Ensure package manager repositories are configured | Message out repository configs"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the apt package repositories"
                - "Please review to make sure they conform to your sites policies"
                - "{{ ubtu22cis_1_2_1_apt_policy.stdout_lines }}"

      - name: "1.2.1 | WARN | Ensure package manager repositories are configured | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.2.1'
  when:
      - ubtu22cis_rule_1_2_1
  tags:
      - level1-server
      - ubtu22cis_level1
      - level1-workstation
      - manual
      - audit
      - rule_1.2.1
      - apt

- name: "1.2.2 | AUDIT | Ensure GPG keys are configured"
  block:
      - name: "1.2.2 | AUDIT | Ensure GPG keys are configured | Get apt gpg keys"
        ansible.builtin.shell: apt-key list
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu22cis_1_2_2_apt_gpgkeys

      - name: "1.2.2 | AUDIT | Ensure GPG keys are configured | Message out apt gpg keys"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the apt gpg keys configured"
                - "Please review to make sure they are configured"
                - "in accordance with site policy"
                - "{{ ubtu22cis_1_2_2_apt_gpgkeys.stdout_lines }}"

      - name: "1.2.2 | WARN | Ensure GPG keys are configured | warn_count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.2.2'
  when:
      - ubtu22cis_rule_1_2_2
  tags:
      - level1-server
      - ubtu22cis_level1
      - level1-workstation
      - manual
      - audit
      - rule_1.2.2
      - gpg
      - keys



###1.3.x Filesystem Integrity Checking

- name: "1.3.1 | PATCH | Ensure AIDE is installed"
  block:
      - name: "1.3.1 | PATCH | Ensure AIDE is installed"
        ansible.builtin.package:
            name: ['aide', 'aide-common']
            state: present
            update_cache: true
        register: ubtu22cis_rule_1_3_1_aide_added
        when:
            - "'aide' not in ansible_facts.packages or
              'aide-common' not in ansible_facts.packages"

      - name: "1.3.1 | PATCH | Ensure AIDE is installed | Recapture packages"
        ansible.builtin.package_facts:
            manager: auto
        when: ubtu22cis_rule_1_3_1_aide_added.skipped is not defined

      - name: "1.3.1 | PATCH | Ensure AIDE is installed | Configure AIDE"
        ansible.builtin.shell: aideinit && mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db
        args:
            creates: /var/lib/aide/aide.db
        changed_when: false
        failed_when: false
        async: "{{ ubtu22cis_aide_init.async }}"
        poll: "{{ ubtu22cis_aide_init.poll }}"
        when: not ansible_check_mode
  when:
      - ubtu22cis_rule_1_3_1
      - ubtu22cis_config_aide
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.3.1
      - aide

- name: "1.3.2 | PATCH | Ensure filesystem integrity is regularly checked"
  ansible.builtin.cron:
      name: Run AIDE integrity check
      cron_file: "{{ ubtu22cis_aide_cron['cron_file'] }}"
      user: "{{ ubtu22cis_aide_cron['cron_user'] }}"
      minute: "{{ ubtu22cis_aide_cron['aide_minute'] | default('0') }}"
      hour: "{{ ubtu22cis_aide_cron['aide_hour'] | default('5') }}"
      day: "{{ ubtu22cis_aide_cron['aide_day'] | default('*') }}"
      month: "{{ ubtu22cis_aide_cron['aide_month'] | default('*') }}"
      weekday: "{{ ubtu22cis_aide_cron['aide_weekday'] | default('*') }}"
      job: "{{ ubtu22cis_aide_cron['aide_job'] }}"
  when:
      - ubtu22cis_config_aide
      - ubtu22cis_rule_1_3_2
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.3.2
      - cron
      - aide


###1.4.x Secure Boot Settings


- name: "1.4.1 | PATCH | Ensure bootloader password is set"
  block:
      - name: "1.4.1 | PATCH | Ensure bootloader password is set"
        ansible.builtin.template:
            src: etc/grub.d/00_user.j2
            dest: "{{ ubtu22cis_grub_user_file }}"
            owner: root
            group: root
            mode: '0755'
        notify: Grub update

      - name: "1.4.1 | PATCH | Ensure bootloader password is set | allow unrestricted boot"
        ansible.builtin.lineinfile:
            path: "/etc/grub.d/10_linux"
            regexp: '(^CLASS="--class gnu-linux --class gnu --class os).*"$'
            line: '\g<1> --unrestricted"'
            backrefs: true
        notify: Grub update
        when: not ubtu22cis_ask_passwd_to_boot
  when:
      - ubtu22cis_set_boot_pass
      - ubtu22cis_rule_1_4_1
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.4.1
      - grub

- name: "1.4.2 | PATCH | Ensure permissions on bootloader config are configured"
  block:
      - name: "1.4.2 | AUDIT | Ensure permissions on bootloader config are configured | Check for Grub file"
        ansible.builtin.stat:
            path: "{{ ubtu22cis_grub_file }}"
        check_mode: false
        register: ubtu22cis_1_4_2_grub_cfg_status

      - name: "1.4.2 | PATCH | Ensure permissions on bootloader config are configured | Set permissions"
        ansible.builtin.file:
            path: "{{ ubtu22cis_grub_file }}"
            owner: root
            group: root
            mode: '0400'
        when:
            - ubtu22cis_1_4_2_grub_cfg_status.stat.exists
  when:
      - ubtu22cis_rule_1_4_2
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.4.2
      - grub

- name: "1.4.3 | PATCH | Ensure authentication required for single user mode"
  ansible.builtin.user:
      name: "{{ ubtu22cis_grub_user }}"
      password: "{{ ubtu22cis_grub_user_passwd }}"
  when:
      - ubtu22cis_rule_1_4_3
      - ubtu22cis_set_grub_user_pass
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.4.3
      - passwd
      - grub


###1.5.x Additional Process Hardening

- name: "1.5.1 | PATCH | Ensure address space layout randomization (ASLR) is enabled | Set active kernel parameter"
  ansible.posix.sysctl:
      name: kernel.randomize_va_space
      value: '2'
      state: present
      sysctl_file: "{{ ubtu22cis_sysctl_kernel_conf }}"
      reload: true
      sysctl_set: true
      ignoreerrors: true
  when:
      - ubtu22cis_rule_1_5_1
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.5.1
      - aslr

- name: "1.5.2 | PATCH | Ensure prelink is not installed"
  block:
      - name: "1.5.2 | PATCH | Ensure prelink is not installed | Restore binaries to normal"
        ansible.builtin.shell: prelink -ua
        changed_when: false
        failed_when: false

      - name: "1.5.2 | PATCH | Ensure prelink is not installed| Remove prelink package"
        ansible.builtin.package:
            name: prelink
            state: absent
            purge: "{{ ubtu22cis_purge_apt }}"
  when:
      - ubtu22cis_rule_1_5_2
      - "'prelink' in ansible_facts.packages"
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.5.2
      - prelink

- name: "1.5.3 | PATCH | Ensure Automatic Error Reporting is not enabled"
  block:
      - name: "1.5.3 | PATCH | Ensure Automatic Error Reporting is not enabled | disable"
        ansible.builtin.lineinfile:
            path: /etc/default/apport
            regexp: ^enabled
            line: enabled=0
            create: true
            owner: root
            group: root
            mode: '0644'

      - name: "1.5.3 | PATCH | Ensure Automatic Error Reporting is not enabled | remove package"
        ansible.builtin.package:
            name: apport
            state: absent
            purge: "{{ ubtu22cis_purge_apt }}"
        when:
            - "'apport' in ansible_facts.packages"
  when:
      - ubtu22cis_rule_1_5_3
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.5.3
      - apport

- name: "1.5.4 | PATCH | Ensure core dumps are restricted"
  block:
      - name: "1.5.4 | PATCH | Ensure core dumps are restricted | kernel sysctl"
        ansible.posix.sysctl:
            name: fs.suid_dumpable
            value: '0'
            state: present
            sysctl_file: "{{ ubtu22cis_sysctl_kernel_conf }}"
            reload: true
            sysctl_set: true
            ignoreerrors: true

      - name: "1.5.4 | PATCH | Ensure core dumps are restricted | security limits"
        ansible.builtin.lineinfile:
            path: /etc/security/limits.d/99_zero_core.conf
            regexp: '^\* hard core'
            line: '* hard core 0'
            create: true
            owner: root
            group: root
            mode: '0644'

      - name: "1.5.4 | PATCH | Ensure core dumps are restricted | sysctl.conf"
        ansible.builtin.lineinfile:
            path: /etc/sysctl.conf
            regexp: '^fs.suid_dumpable'
            line: fs.suid_dumpable=0
            owner: root
            group: root
            mode: '0644'
        notify: Reload systemctl

      - name: "1.5.4 | PATCH | Ensure core dumps are restricted | coredump.conf"
        ansible.builtin.lineinfile:
            path: /etc/systemd/coredump.conf
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            create: true
            owner: root
            group: root
            mode: '0644'
        loop:
            - { regexp: '^Storage', line: 'Storage=none' }
            - { regexp: '^ProcessSizeMax', line: 'ProcessSizeMax=0' }
        when: "'systemd-coredump' in ansible_facts.packages"
  when:
      - ubtu22cis_rule_1_5_4
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.5.4
      - coredump


###1.6.x Configuring Apparmor

- name: "1.6.1.1 | PATCH | Ensure AppArmor is installed"
  ansible.builtin.package:
      name: ['apparmor', 'apparmor-utils']
      state: present
  when:
      - ubtu22cis_rule_1_6_1_1
      - "'apparmor' not in ansible_facts.packages or
        'apparmor-utils' not in ansible_facts.packages"
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.6.1.1
      - apparmor
- name: "1.6.1.2 | PATCH | Ensure AppArmor and other settings are added in the bootloader configuration"
  block:
    - name: "1.6.1.2 | Get current GRUB_CMDLINE_LINUX"
      ansible.builtin.shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | cut -f2 -d'"'
      changed_when: false
      failed_when: false
      register: ubtu22cis_grub_cmdline

    - name: "1.6.1.2 | Ensure necessary kernel parameters are added to GRUB_CMDLINE_LINUX"
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_CMDLINE_LINUX='
        line: 'GRUB_CMDLINE_LINUX="{{ ubtu22cis_grub_cmdline.stdout }} apparmor=1 security=apparmor numa=off nvme_core.default_ps_max_latency_us=0"'
        backrefs: false
      notify: Grub update
      when:
        - "'apparmor=1' not in ubtu22cis_grub_cmdline.stdout"
        - "'security=apparmor' not in ubtu22cis_grub_cmdline.stdout"
        - "'numa=off' not in ubtu22cis_grub_cmdline.stdout"
        - "'nvme_core.default_ps_max_latency_us=0' not in ubtu22cis_grub_cmdline.stdout"
  when:
    - ubtu22cis_rule_1_6_1_2
  tags:
    - level1-server
    - ubtu22cis_level1
    - level1-workstation
    - automated
    - patch
    - rule_1.6.1.2
    - apparmor

# - name: "1.6.1.2 | PATCH | Ensure AppArmor is enabled in the bootloader configuration"
#   block:
#       - name: "1.6.1.2 | AUDIT | Ensure AppArmor is enabled in the bootloader configuration | Get current settings"
#         ansible.builtin.shell: grep "GRUB_CMDLINE_LINUX=" /etc/default/grub | cut -f2 -d'"'
#         changed_when: false
#         failed_when: false
#         check_mode: false
#         register: ubtu22cis_1_6_1_2_cmdline_settings

#       - name: "1.6.1.2 | PATCH | Ensure AppArmor is enabled in the bootloader configuration | Set apparmor settings if none exist"
#         ansible.builtin.lineinfile:
#             path: /etc/default/grub
#             regexp: ^(GRUB_CMDLINE_LINUX=")(|apparmor=\d\s)(.*\w+")
#             line: \1apparmor=1 \3
#             backrefs: true
#         notify: Grub update
#         when: ubtu22cis_1_6_1_2_cmdline_settings.stdout is not search('apparmor=')

#       - name: "1.6.1.2 | PATCH | Ensure AppArmor is enabled in the bootloader configuration | Set security settings if none exist"
#         ansible.builtin.lineinfile:
#             path: /etc/default/grub
#             regexp: ^(GRUB_CMDLINE_LINUX=")(|security=\w+\s)(.*\w+")
#             line: \1security=apparmor \3
#             backrefs: true
#         notify: Grub update
#         when: ubtu22cis_1_6_1_2_cmdline_settings.stdout is not search('security=')

#       - name: "1.6.1.2 | PATCH | Ensure AppArmor is enabled in the bootloader configuration | Set apparmor settings if none exist"
#         ansible.builtin.lineinfile:
#             path: /etc/default/grub
#             regexp: '^GRUB_CMDLINE_LINUX='
#             line: 'GRUB_CMDLINE_LINUX="apparmor=1 security=apparmor {{ ubtu22cis_1_6_1_2_cmdline_settings.stdout }}  numa=off nvme_core.default_ps_max_latency_us=0 "'
#             insertafter: '^GRUB_'
#         when:
#             - "'apparmor' not in ubtu22cis_1_6_1_2_cmdline_settings.stdout"
#             - "'security' not in ubtu22cis_1_6_1_2_cmdline_settings.stdout"
#         notify: Grub update

#       - name: "1.6.1.2 | PATCH | Ensure AppArmor is enabled in the bootloader configuration | Replace apparmor settings when exists"
#         ansible.builtin.replace:
#             path: /etc/default/grub
#             regexp: "{{ item.regexp }}"
#             replace: "{{ item.replace }}"
#         with_items:
#             - { regexp: 'apparmor=\w+', replace: 'apparmor=1' }
#             - { regexp: 'security=\w+', replace: 'security=apparmor' }
#             - { regexp: 'numa=\w*', replace: 'numa=off' } 
#             - { regexp: 'nvme_core\.default_ps_max_latency_us=\d+', replace: 'nvme_core.default_ps_max_latency_us=0' }
#         when:
#             - "'apparmor' in ubtu22cis_1_6_1_2_cmdline_settings.stdout or
#               'security' in ubtu22cis_1_6_1_2_cmdline_settings.stdout"
#         notify: Grub update
#   when:
#       - ubtu22cis_rule_1_6_1_2
#   tags:
#       - level1-server
#       - ubtu22cis_level1
#       - level1-workstation
#       - automated
#       - patch
#       - rule_1.6.1.2
#       - apparmor


- name: "1.6.1.3 | PATCH | Ensure all AppArmor Profiles are in enforce or complain mode"
  block:
      - name: "1.6.1.3 | AUDIT | Ensure all AppArmor Profiles are in enforce or complain | Set ubtu22cis_apparmor_enforce_only true for GOSS"
        ansible.builtin.set_fact:
            ubtu22cis_apparmor_enforce_only: true
        changed_when: false
        when:
            - ubtu22cis_apparmor_mode == "enforce"

      - name: "1.6.1.3 | AUDIT | Ensure all AppArmor Profiles are in enforce or complain | Set ubtu22cis_apparmor_enforce_only false for GOSS"
        ansible.builtin.set_fact:
            ubtu22cis_apparmor_enforce_only: false
        changed_when: false
        when:
            - ubtu22cis_apparmor_mode == "complain"
      - name: "1.6.1.3 | PATCH | Ensure all AppArmor Profiles are in enforce or complain mode | Get pre apply enforce count"
        ansible.builtin.shell: apparmor_status |  grep "profiles are in {{ubtu22cis_apparmor_mode}} mode" | tr -d -c 0-9
        changed_when: false
        failed_when: false
        register: ubtu22cis_1_6_1_3_pre_count

      - name: "1.6.1.3 | PATCH | Ensure all AppArmor Profiles are in enforce or complain mode | Apply complaining/enforcing to /etc/apparmor.d profiles"
        ansible.builtin.shell: aa-{{ubtu22cis_apparmor_mode}} /etc/apparmor.d/*
        changed_when: false
        failed_when: false

      - name: "1.6.1.3 | PATCH | Ensure all AppArmor Profiles are in enforce or complain mode | Get post apply enforce count"
        ansible.builtin.shell: apparmor_status |  grep "profiles are in {{ubtu22cis_apparmor_mode}} mode" | tr -d -c 0-9
        changed_when: false
        failed_when: false
        register: ubtu22cis_1_6_1_3_post_count

      - name: "1.6.1.3 | PATCH | Ensure all AppArmor Profiles are in enforce or complain mode | This flags for idempotency"
        ansible.builtin.debug:
            msg: Changed! The profiles in /etc/apparmor.d were set to {{ubtu22cis_apparmor_mode}} mode
        changed_when: true
        when: ubtu22cis_1_6_1_3_pre_count.stdout != ubtu22cis_1_6_1_3_post_count.stdout
  when:
      - ubtu22cis_rule_1_6_1_3
      - not ubtu22cis_apparmor_disable
      - not control_1_6_1_4_was_run
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.6.1.3
      - apparmor

###1.7.x Ensure message 

- name: "1.7.1 | PATCH | Ensure message of the day is configured properly"
  block:
      - name: "1.7.1 | PATCH | Ensure message of the day is configured properly | motd"
        ansible.builtin.template:
            src: etc/motd.j2
            dest: /etc/motd

      - name: "1.7.1 | PATCH | Ensure message of the day is configured properly | disable dynamic_motd"
        ansible.builtin.lineinfile:
            path: /etc/pam.d/sshd
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backrefs: true
        loop:
            - { regexp: '(session\s+optional\s+pam_motd.so\s+motd=/run/motd.dynamic)', line: '# \1' }
            - { regexp: '(session\s+optional\s+pam_motd.so noupdate)', line: '# \1' }
            - { regexp: '# Pam_motd.so disabled for CIS benchmark', line: '# Pam_motd.so disabled for CIS benchmark' }
        when: ubtu22cis_disable_dynamic_motd
  when:
      - ubtu22cis_rule_1_7_1
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.7.1
      - motd

- name: "1.7.2 | PATCH | Ensure local login warning banner is configured properly"
  block:
      - name: "1.7.2 | PATCH | Ensure local login warning banner is configured properly | issue"
        ansible.builtin.template:
            src: etc/issue.j2
            dest: /etc/issue

      - name: "1.7.2 | PATCH | Ensure local login warning banner is kept on package upgrade | issue"
        community.general.dpkg_divert:
            path: /etc/issue
  when:
      - ubtu22cis_rule_1_7_2
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.7.2
      - banner

- name: "1.7.3 | PATCH | Ensure remote login warning banner is configured properly"
  block:
      - name: "1.7.3 | PATCH | Ensure remote login warning banner is configured properly | issue.net"
        ansible.builtin.template:
            src: etc/issue.net.j2
            dest: /etc/issue.net

      - name: "1.7.3 | PATCH | Ensure remote login warning banner is kept on package upgrade | issue.net"
        community.general.dpkg_divert:
            path: /etc/issue.net
  when:
      - ubtu22cis_rule_1_7_3
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.7.3
      - banner

- name: "1.7.4 | PATCH | Ensure permissions on /etc/motd are configured"
  ansible.builtin.file:
      path: /etc/motd
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_1_7_4
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.7.4
      - permissions
      - motd

- name: "1.7.5 | PATCH | Ensure permissions on /etc/issue are configured"
  ansible.builtin.file:
      path: /etc/issue
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_1_7_5
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.7.5
      - permissions
      - banner

- name: "1.7.6 | PATCH | Ensure permissions on /etc/issue.net are configured"
  ansible.builtin.file:
      path: /etc/issue.net
      owner: root
      group: root
      mode: '0644'
  when:
      - ubtu22cis_rule_1_7_6
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.7.6
      - permissions
      - banner

### GNOME

- name: "1.8.2 | PATCH | Ensure GDM login banner is configured"
  block:
      - name: "1.8.2 | PATCH | Ensure GDM login banner is configured | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d"
            owner: root
            group: root
            mode: '0755'
            state: directory

      - name: "1.8.2 | PATCH | Ensure GDM login banner is configured | banner settings"
        ansible.builtin.lineinfile:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/00-login-screen"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
            create: true
            owner: root
            group: root
            mode: '0644'
        loop:
            - { regexp: '\[org\/gnome\/login-screen\]', line: '[org/gnome/login-screen]', insertafter: EOF }
            - { regexp: 'banner-message-enable', line: 'banner-message-enable=true', insertafter: '\[org\/gnome\/login-screen\]'}
            - { regexp: 'banner-message-text', line: "banner-message-text='{{ ubtu22cis_warning_banner | regex_replace('\n', ' ') | trim }}'", insertafter: 'banner-message-enable' }
  notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_2
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.2
      - gnome

- name: "1.8.3 | PATCH | Ensure disable-user-list is enabled"
  block:
      - name: "1.8.3 | PATCH | Ensure disable-user-list is enabled | make directories"
        ansible.builtin.file:
            path: "{{ item }}"
            owner: root
            group: root
            mode: '0755'
            state: directory
        loop:
            - /etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d
            - /etc/dconf/profile

      - name: "1.8.3 | PATCH | Ensure disable-user-list is enabled | disable-user-list setting login-screen"
        ansible.builtin.lineinfile:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/00-login-screen"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
            create: true
            owner: root
            group: root
            mode: '0644'
        loop:
            - { regexp: '\[org\/gnome\/login-screen\]', line: '[org/gnome/login-screen]', insertafter: EOF }
            - { regexp: 'disable-user-list', line: 'disable-user-list=true', insertafter: '\[org\/gnome\/login-screen\]'}

      - name: "1.8.3 | PATCH | Ensure disable-user-list is enabled | disable-user-list setting profile"
        ansible.builtin.lineinfile:
            path: "/etc/dconf/profile/{{ ubtu22cis_dconf_db_name }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.insertafter }}"
            create: true
            owner: root
            group: root
            mode: '0644'
        loop:
            - { regexp: '^user-db:user', line: 'user-db:user', insertafter: EOF }
            - { regexp: '^system-db:{{ ubtu22cis_dconf_db_name }}', line: 'system-db:{{ ubtu22cis_dconf_db_name }}', insertafter: 'user-db:user'}
            - { regexp: '^file-db:/usr/share/gdm/greeter-dconf-defaults', line: 'file-db:/usr/share/gdm/greeter-dconf-defaults', insertafter: 'system-db:{{ ubtu22cis_dconf_db_name }}'}
  notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_3
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.3
      - gnome

- name: "1.8.4 | PATCH | Ensure GDM screen locks when the user is idle"
  block:
      - name: "1.8.4 | PATCH | Ensure GDM screen locks when the user is idle | session profile"
        ansible.builtin.lineinfile:
            path: "/etc/dconf/profile/{{ ubtu22cis_dconf_db_name }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            insertafter: "{{ item.after | default(omit) }}"
            create: true
        loop:
            - { regexp: 'user-db:user', line: 'user-db:user' }
            - { regexp: 'system-db:{{ ubtu22cis_dconf_db_name }}', line: 'system-db:{{ ubtu22cis_dconf_db_name }}', after: '^user-db.*' }

      - name: "1.8.4 | PATCH | Ensure GDM screen locks when the user is idle | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d"
            owner: root
            group: root
            mode: '0755'
            state: directory
        notify: Update dconf

      - name: "1.8.4 | PATCH | Ensure GDM screen locks when the user is idle | session script"
        ansible.builtin.template:
            src: etc/dconf/db/00-screensaver.j2
            dest: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/00-screensaver"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_4
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.4
      - gnome

- name: "1.8.5 | PATCH | Ensure GDM screen locks cannot be overridden"
  block:
      - name: "1.8.5 | PATCH | Ensure GDM screen locks cannot be overridden | make lock directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/locks"
            owner: root
            group: root
            mode: '0755'
            state: directory
        notify: Update dconf

      - name: "1.8.5 | PATCH | Ensure GDM screen locks cannot be overridden | make lockfile"
        ansible.builtin.template:
            src: etc/dconf/db/00-screensaver_lock.j2
            dest: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/locks/00-screensaver"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_5
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.5
      - gnome

- name: "1.8.6 | PATCH | Ensure GDM automatic mounting of removable media is disabled"
  block:
      - name: "1.8.6 | PATCH | Ensure GDM automatic mounting of removable media is disabled | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d"
            owner: root
            group: root
            mode: '0755'
            state: directory
        notify: Update dconf

      - name: "1.8.6 | PATCH | Ensure GDM automatic mounting of removable media is disabled | session script"
        ansible.builtin.template:
            src: etc/dconf/db/00-media-automount.j2
            dest: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/00-media-automount"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_6
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.6
      - gnome

- name: "1.8.7 | PATCH | Ensure GDM disabling automatic mounting of removable media is not overridden"
  block:
      - name: "1.8.7 | PATCH | Ensure GDM disabling automatic mounting of removable media is not overridden | make lock directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/locks"
            owner: root
            group: root
            mode: '0755'
            state: directory
        notify: Update dconf

      - name: "1.8.7 | PATCH | Ensure GDM disabling automatic mounting of removable media is not overridden | make lockfile"
        ansible.builtin.template:
            src: etc/dconf/db/00-automount_lock.j2
            dest: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/locks/00-automount_lock"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_7
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.7
      - gnome

- name: "1.8.8 | PATCH | Ensure GDM autorun-never is enabled"
  block:
      - name: "1.8.8 | PATCH | Ensure GDM autorun-never is enabled | make directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d"
            owner: root
            group: root
            mode: '0755'
            state: directory
        notify: Update dconf

      - name: "1.8.8 | PATCH | Ensure GDM autorun-never is enabled | session script"
        ansible.builtin.template:
            src: etc/dconf/db/00-media-autorun.j2
            dest: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/00-media-autorun"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_8
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.8
      - gnome

- name: "1.8.9 | PATCH | Ensure GDM autorun-never is not overridden"
  block:
      - name: "1.8.9 | PATCH | Ensure GDM autorun-never is not overridden | make lock directory"
        ansible.builtin.file:
            path: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/locks"
            owner: root
            group: root
            mode: '0755'
            state: directory
        notify: Update dconf

      - name: "1.8.9 | PATCH | Ensure GDM autorun-never is not overridden | make lockfile"
        ansible.builtin.template:
            src: etc/dconf/db/00-autorun_lock.j2
            dest: "/etc/dconf/db/{{ ubtu22cis_dconf_db_name }}.d/locks/00-autorun_lock"
            owner: root
            group: root
            mode: '0644'
        notify: Update dconf
  when:
      - ubtu22cis_rule_1_8_9
      - ubtu22cis_desktop_required
  tags:
      - level1-server
      - level2-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.9
      - gnome

- name: "1.8.10 | PATCH | Ensure XDCMP is not enabled"
  ansible.builtin.lineinfile:
      path: /etc/gdm3/custom.conf
      regexp: '^Enable.*=.*true'
      state: absent
  when:
      - ubtu22cis_rule_1_8_10
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - automated
      - patch
      - rule_1.8.10
      - gnome
      - xdcmp


###1.9 Ensure security updates 

- name: "1.9 | PATCH | Ensure updates, patches, and additional security software are installed"
  ansible.builtin.package:
      name: "*"
      state: latest
  when:
      - ubtu22cis_rule_1_9
  tags:
      - level1-server
      - level1-workstation
      - ubtu22cis_level1
      - manual
      - patch
      - rule_1.9
      - patch
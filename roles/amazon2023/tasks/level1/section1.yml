---

##### 1.1.1.x mounting filestystems

- name: "1.1.1.4 | PATCH | Ensure mounting of freevxfs filesystems is disabled"
  block:
      - name: "1.1.1.4 | PATCH | Ensure mounting of freevxfs filesystems is disable | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/CIS.conf
            regexp: "^(#)?install freevxfs(\\s|$)"
            line: "install freevxfs /bin/true"
            create: true
            mode: '0600'

      - name: "1.1.1.4 | PATCH | Ensure mounting of freevxfs filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist freevxfs(\\s|$)"
            line: "blacklist freevxfs"
            create: true
            mode: '0600'

      - name: "1.1.1.4 | PATCH | Ensure mounting of freevxfs filesystems is disable | Disable freevxfs"
        community.general.modprobe:
            name: freevxfs
            state: absent
        when: not system_is_container
  when:
      - amzn2023cis_rule_1_1_1_4
  tags:
      - level1-server
      - patch
      - rule_1.1.1.4
      - freevxfs
      - nist_sp800-53r5_CM-7

- name: "1.1.1.5 | PATCH | Ensure mounting of jffs2 filesystems is disabled"
  block:
      - name: "1.1.1.5 | PATCH | Ensure mounting of jffs2 filesystems is disable | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/CIS.conf
            regexp: "^(#)?install jffs2(\\s|$)"
            line: "install jffs2 /bin/true"
            create: true
            mode: '0600'

      - name: "1.1.1.5 | PATCH | Ensure mounting of jffs2 filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist jffs2(\\s|$)"
            line: "blacklist jffs2"
            create: true
            mode: '0600'

      - name: "1.1.1.5 | PATCH | Ensure mounting of jffs2 filesystems is disable | Disable jffs2"
        community.general.modprobe:
            name: jffs2
            state: absent
        when: not system_is_container
  when:
      - amzn2023cis_rule_1_1_1_5
  tags:
      - level1-server
      - patch
      - rule_1.1.1.5
      - jffs2
      - nist_sp800-53r5_CM-7

- name: "1.1.1.6 | PATCH | Ensure mounting of hfs filesystems is disabled"
  block:
      - name: "1.1.1.6 | PATCH | Ensure mounting of hfs filesystems is disable | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/CIS.conf
            regexp: "^(#)?install hfs(\\s|$)"
            line: "install hfs /bin/true"
            create: true
            mode: '0600'

      - name: "1.1.1.6 | PATCH | Ensure mounting of hfs filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist hfs(\\s|$)"
            line: "blacklist hfs"
            create: true
            mode: '0600'

      - name: "1.1.1.6 | PATCH | Ensure mounting of hfs filesystems is disable | Disable hfs"
        community.general.modprobe:
            name: hfs
            state: absent
        when: not system_is_container
  when:
      - amzn2023cis_rule_1_1_1_6
  tags:
      - level1-server
      - patch
      - rule_1.1.1.6
      - hfs
      - nist_sp800-53r5_CM-7

- name: "1.1.1.7 | PATCH | Ensure mounting of hfsplus filesystems is disabled"
  block:
      - name: "1.1.1.7 | PATCH | Ensure mounting of hfsplus filesystems is disable | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/CIS.conf
            regexp: "^(#)?install hfsplus(\\s|$)"
            line: "install hfsplus /bin/true"
            create: true
            mode: '0600'

      - name: "1.1.1.7 | PATCH | Ensure mounting of hfsplus filesystems is disabled | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist hfsplus(\\s|$)"
            line: "blacklist hfsplus"
            create: true
            mode: '0600'

      - name: "1.1.1.7 | PATCH | Ensure mounting of hfsplus filesystems is disable | Disable hfsplus"
        community.general.modprobe:
            name: hfsplus
            state: absent
        when: not system_is_container
  when:
      - amzn2023cis_rule_1_1_1_7
  tags:
      - level1-server
      - patch
      - rule_1.1.1.7
      - hfsplus
      - nist_sp800-53r5_CM-7



- name: "1.1.2.1 | PATCH | Ensure /tmp is a separate partition"
  block:
      - name: "1.1.2.1 | PATCH | Ensure /tmp is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.2.1 | PATCH | Ensure /tmp is a separate partition | Present"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.1.2.1'
      required_mount: '/tmp'
  when:
      - required_mount not in mount_names
      - amzn2023cis_rule_1_1_2_1
  tags:
      - level1-server
      - audit
      - mounts
      - rule_1.1.2.1
      - nist_sp800-53r5_CM-7

# via fstab
- name: |
        "1.1.2.2 | PATCH | Ensure nodev option set on /tmp partition"
        "1.1.2.3 | PATCH | Ensure noexec option set on /tmp partition"
        "1.1.2.4 | PATCH | Ensure nosuid option set on /tmp partition"
  ansible.posix.mount:
      name: /tmp
      src: "{{ item.device }}"
      fstype: "{{ item.fstype }}"
      state: present
      opts: defaults,{% if amzn2023cis_rule_1_1_2_2 %}nodev,{% endif %}{% if amzn2023cis_rule_1_1_2_3 %}noexec,{% endif %}{% if amzn2023cis_rule_1_1_2_4 %}nosuid{% endif %}
  notify: Remount tmp
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - item.mount == "/tmp"
      - not amzn2023cis_tmp_svc
      - amzn2023cis_rule_1_1_2_2 or
        amzn2023cis_rule_1_1_2_3 or
        amzn2023cis_rule_1_1_2_4
  tags:
      - level1-server
      - patch
      - mounts
      - rule_1.1.2.2
      - rule_1.1.2.3
      - rule_1.1.2.4
      - nist_sp800-53r5_CM-7

# 1.1.2.x mounting /tmp
- name: |
        "1.1.2.2 | PATCH | Ensure nodev option set on /tmp partition"
        "1.1.2.3 | PATCH | Ensure noexec option set on /tmp partition"
        "1.1.2.4 | PATCH | Ensure nosuid option set on /tmp partition"
  ansible.builtin.template:
      src: etc/systemd/system/tmp.mount.j2
      dest: /etc/systemd/system/tmp.mount
      owner: root
      group: root
      mode: '0644'
  notify: Systemd restart tmp.mount
  when:
      - amzn2023cis_tmp_svc
      - amzn2023cis_rule_1_1_2_2 or
        amzn2023cis_rule_1_1_2_3 or
        amzn2023cis_rule_1_1_2_4
  tags:
      - level1-server
      - patch
      - mounts
      - rule_1.1.2.2
      - rule_1.1.2.3
      - rule_1.1.2.4
      - nist_sp800-53r5_CM-7
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2



#### 1.1.3.x for patching var
- name: |
          "1.1.3.2 | PATCH | Ensure nodev option set on /var partition"
          "1.1.3.3 | PATCH | Ensure nosuid option set on /var partition"
  ansible.posix.mount:
      name: /var
      src: "{{ item.device }}"
      fstype: "{{ item.fstype }}"
      state: present
      opts: defaults,{% if amzn2023cis_rule_1_1_3_2 %}nodev,{% endif %}{% if amzn2023cis_rule_1_1_3_3 %}nosuid,{% endif %}
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  notify: Change_requires_reboot
  when:
      - item.mount == "/var"
      - amzn2023cis_rule_1_1_3_2 or
        amzn2023cis_rule_1_1_3_3
  tags:
      - level1-server
      - patch
      - mounts
      - skip_ansible_lint
      - rule_1.1.3.2
      - rule_1.1.3.3
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2


####### 1.1.4.x creating /var/tmp mount
- name: |
          "1.1.4.2 | PATCH | Ensure noexec option set on /var/tmp partition"
          "1.1.4.3 | PATCH | Ensure nosuid option set on /var/tmp partition"
          "1.1.4.4 | PATCH | Ensure nodev option set on /var/tmp partition"
  ansible.posix.mount:
      name: /var/tmp
      src: "{{ item.device }}"
      fstype: "{{ item.fstype }}"
      state: present
      opts: defaults,{% if amzn2023cis_rule_1_1_4_2 %}noexec,{% endif %}{% if amzn2023cis_rule_1_1_4_3 %}nosuid,{% endif %}{% if amzn2023cis_rule_1_1_4_4 %}nodev{% endif %}
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  notify: Change_requires_reboot
  when:
      - item.mount == "/var/tmp"
      - amzn2023cis_rule_1_1_4_2 or
        amzn2023cis_rule_1_1_4_3 or
        amzn2023cis_rule_1_1_4_4
  tags:
      - level1-server
      - patch
      - mounts
      - skip_ansible_lint
      - rule_1.1.4.2
      - rule_1.1.4.3
      - rule_1.1.4.4
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2


##1.1.5.x creating separate partition /var/log partition exists
- name: |
          "1.1.5.2 | PATCH | Ensure nodev option set on /var/log partition"
          "1.1.5.3 | PATCH | Ensure noexec option set on /var/log partition"
          "1.1.5.4 | PATCH | Ensure nosuid option set on /var/log partition"
  ansible.posix.mount:
      name: /var/log
      src: "{{ item.device }}"
      fstype: "{{ item.fstype }}"
      state: present
      opts: defaults,{% if amzn2023cis_rule_1_1_5_2 %}nodev,{% endif %}{% if amzn2023cis_rule_1_1_5_3 %}noexec,{% endif %}{% if amzn2023cis_rule_1_1_5_4 %}nosuid{% endif %}
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  notify: Change_requires_reboot
  when:
      - item.mount == "/var/log"
      - amzn2023cis_rule_1_1_5_2 or
        amzn2023cis_rule_1_1_5_3 or
        amzn2023cis_rule_1_1_5_4
  tags:
      - level1-server
      - patch
      - mounts
      - skip_ansible_lint
      - rule_1.1.5.2
      - rule_1.1.5.3
      - rule_1.1.5.4
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2



#####1.1.6.x creating separate partition /var/log/audit partition exists
- name: |
          "1.1.6.2 | PATCH | Ensure noexec option set on /var/log/audit partition"
          "1.1.6.3 | PATCH | Ensure nodev option set on /var/log/audit partition"
          "1.1.6.4 | PATCH | Ensure nosuid option set on /var/log/audit partition"
  ansible.posix.mount:
      name: /var/log/audit
      src: "{{ item.device }}"
      fstype: "{{ item.fstype }}"
      state: present
      opts: defaults,{% if amzn2023cis_rule_1_1_6_2 %}noexec,{% endif %}{% if amzn2023cis_rule_1_1_6_3 %}nodev,{% endif %}{% if amzn2023cis_rule_1_1_6_4 %}nosuid{% endif %}
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  notify: Change_requires_reboot
  when:
      - item.mount == "/var/log/audit"
      - amzn2023cis_rule_1_1_6_2 or
        amzn2023cis_rule_1_1_6_3 or
        amzn2023cis_rule_1_1_6_4
  tags:
      - level1-server
      - patch
      - mounts
      - rule_1.1.6.2
      - rule_1.1.6.3
      - rule_1.1.6.4
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

#### 1.1.7.x partition for /home
- name: |
    "1.1.7.2 | PATCH | Ensure nodev option set on /home partition
     1.1.7.3 | PATCH | Ensure nosuid option set on /home partition"
  ansible.posix.mount:
      name: /home
      src: "{{ item.device }}"
      fstype: "{{ item.fstype }}"
      state: present
      opts: defaults,{% if amzn2023cis_rule_1_1_7_2 %}nodev,{% endif %}{% if amzn2023cis_rule_1_1_7_3 %}nosuid,{% endif %}
  loop: "{{ ansible_facts.mounts }}"
  loop_control:
      label: "{{ item.device }}"
  notify: Change_requires_reboot
  when:
      - item.mount == "/home"
      - amzn2023cis_rule_1_1_7_2 or
        amzn2023cis_rule_1_1_7_3
  tags:
      - level1-server
      - patch
      - mounts
      - rule_1.1.7.2
      - rule_1.1.7.3
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2



###### Creating and ensuring /dev/shm parition
# Skips if mount is absent
- name: "1.1.8.1 | AUDIT | Ensure /dev/shm is a separate partition"
  block:
      - name: "1.1.8.1 | AUDIT | Ensure /dev/shm is a separate partition | Absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.8.1 | AUDIT | Ensure separate partition exists for /home | Present"
        ansible.builtin.import_tasks:
            file: warning_facts.yml

  vars:
      warn_control_id: '1.1.8.1'
      required_mount: '/dev/shm'
  when:
      - required_mount not in mount_names
      - amzn2023cis_rule_1_1_8_1
  tags:
      - level1-server
      - audit
      - mounts
      - rule_1.1.8.1
      - nist_sp800-53r5_CM-7

- name: |
       "1.1.8.2 | PATCH | Ensure nodev option set on /dev/shm partition | Set nodev option
        1.1.8.3 | PATCH | Ensure noexec option set on /dev/shm partition | Set nosuid option
        1.1.8.4 | PATCH | Ensure nosuid option set on /dev/shm partition | Set noexec option"
  ansible.posix.mount:
      name: /dev/shm
      src: tmpfs
      fstype: tmpfs
      state: mounted
      opts: defaults,{% if amzn2023cis_rule_1_1_8_2 %}nodev,{% endif %}{% if amzn2023cis_rule_1_1_8_3 %}noexec,{% endif %}{% if amzn2023cis_rule_1_1_8_4 %}nosuid{% endif %}
  notify: Change_requires_reboot
  when:
      - amzn2023cis_rule_1_1_8_2 or
        amzn2023cis_rule_1_1_8_3 or
        amzn2023cis_rule_1_1_8_4
  tags:
      - level1-server
      - patch
      - mounts
      - rule_1.1.8.2
      - rule_1.1.8.3
      - rule_1.1.8.4
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

#### 1.1.9 Disable USB storage 

- name: "1.1.9 | PATCH | Disable USB Storage"
  block:
      - name: "1.1.9 | PATCH | Disable USB Storage | Edit modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/CIS.conf
            regexp: "^(#)?install usb-storage(\\s|$)"
            line: "install usb-storage /bin/true"
            create: true
            owner: root
            group: root
            mode: '0600'

      - name: "1.1.9 | PATCH | Disable USB Storage | Edit modprobe config"
        community.general.modprobe:
            name: usb-storage
            state: absent
        when: not system_is_container

      - name: "1.1.9 | PATCH | Disable USB Storage | blacklist"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/blacklist.conf
            regexp: "^(#)?blacklist usb-storage(\\s|$)"
            line: "blacklist usb-storage"
            create: true
            mode: '0600'
  when:
      - amzn2023cis_rule_1_1_9
  tags:
      - level1-server
      - patch
      - mounts
      - removable_storage
      - rule_1.1.9
      - nist_sp800-53r5_SI-3

#####1.2.x 

- name: "1.2.1 | AUDIT | Ensure GPG keys are configured"
  block:
      - name: "1.2.1 | AUDIT | Ensure GPG keys are configured | list installed pubkey keys"
        ansible.builtin.shell: "rpm -qa | grep {{ os_gpg_key_pubkey_name }}"
        changed_when: false
        failed_when: false
        register: os_installed_pub_keys

      - name: "1.2.1 | AUDIT | Ensure GPG keys are configured | Query found keys"
        ansible.builtin.shell: 'rpm -q --queryformat "%{PACKAGER} %{VERSION}\\n" {{ os_gpg_key_pubkey_name }} | grep "{{ os_gpg_key_pubkey_content }}"'
        changed_when: false
        failed_when: false
        register: os_gpg_key_check
        when: os_installed_pub_keys.rc == 0

      - name: "1.2.1 | AUDIT | Ensure GPG keys are configured | expected keys fail"
        ansible.builtin.fail:
            msg: Installed GPG Keys do not meet expected values or expected keys are not installed
        when:
            - os_installed_pub_keys.rc == 1 or
              os_gpg_key_check.rc == 1
  when:
      - amzn2023cis_rule_1_2_1

  tags:
      - level1-server
      - manual
      - patch
      - rule_1.2.1
      - nist_sp800-53r5_SI-2

- name: "1.2.2 | PATCH | Ensure gpgcheck is globally activated"
  block:
      - name: "1.2.2 | AUDIT | Ensure gpgcheck is globally activated | Find repos"
        ansible.builtin.find:
            paths: /etc/yum.repos.d
            patterns: "*.repo"
        register: yum_repos

      - name: "1.2.2 | PATCH | Ensure gpgcheck is globally activated | Update yum.repos"
        ansible.builtin.replace:
            name: "{{ item.path }}"
            regexp: "^gpgcheck=0"
            replace: "gpgcheck=1"
        loop: "{{ yum_repos.files }}"
        loop_control:
            label: "{{ item.path }}"
  when:
      - amzn2023cis_rule_1_2_2
  tags:
      - level1-server
      - patch
      - rule_1.2.2
      - nist_sp800-53r5_SI-3

- name: "1.2.3 | AUDIT | Ensure package manager repositories are configured"
  block:
      - name: "1.2.3 | AUDIT | Ensure package manager repositories are configured | Get repo list"
        ansible.builtin.shell: dnf repolist
        changed_when: false
        failed_when: false
        register: dnf_configured
        check_mode: false

      - name: "1.2.3 | AUDIT | Ensure package manager repositories are configured | Display repo list"
        ansible.builtin.debug:
            msg:
                - "Warning!! Below are the configured repos. Please review and make sure all align with site policy"
                - "{{ dnf_configured.stdout_lines }}"

      - name: "1.2.3 | AUDIT | Ensure package manager repositories are configured | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
  vars:
      warn_control_id: '1.2.3'
  when:
      - amzn2023cis_rule_1_2_3
  tags:
      - level1-server
      - manual
      - audit
      - rule_1.2.3
      - nist_sp800-53r5_SI-3

- name: "1.2.4 | AUDIT | Ensure repo_gpgcheck is globally activated"
  block:
      - name: "1.2.4 | PATCH | Ensure repo_gpgcheck is globally activated | dnf.conf"
        ansible.builtin.lineinfile:
            path: /etc/dnf/dnf.conf
            regexp: '^repo_gpgcheck'
            line: repo_gpgcheck=1

      - name: "1.2.4 | AUDIT| Ensure repo_gpgcheck is globally activated | get repo files"
        ansible.builtin.find:
            paths: /etc/yum.repos.d
            patterns: "*.repo"
        register: repo_files

      - name: "1.2.4 | PATCH | Ensure repo_gpgcheck is globally activated | amend repo files"
        ansible.builtin.replace:
            path: "{{ item.path }}"
            regexp: '^repo_gpgcheck( |)=( |)0'
            replace: repo_gpgcheck=1
        loop: "{{ repo_files.files }}"
        loop_control:
            label: "{{ item.path }}"

  when:
      - amzn2023cis_rule_1_2_4
  tags:
      - level1-server
      - manual
      - audit
      - rule_1.2.4
      - nist_sp800-53r5_SI-3


#### 1.3.x Checking AIDE is installed or not, checking filesystem intergity and cryptographic mechanisms 
- name: "1.3.1 | PATCH | Ensure AIDE is installed"
  block:
      - name: "1.3.1 | PATCH | Ensure AIDE is installed | Install AIDE"
        ansible.builtin.package:
            name: aide
            state: present

      - name: "1.3.1 | PATCH | Ensure AIDE is installed | Build AIDE DB"
        ansible.builtin.shell: /usr/sbin/aide --init
        changed_when: false
        failed_when: false
        async: 45
        poll: 0
        args:
            creates: /var/lib/aide/aide.db.new.gz
        when: 
        - not ansible_check_mode
        - amzn2023cis_config_aide

      - name: "1.3.1 | PATCH | Ensure AIDE is installed | copy AIDE DB"
        ansible.builtin.copy:
            src: /var/lib/aide/aide.db.new.gz
            dest: /var/lib/aide/aide.db.gz
            remote_src: true
  when:
      - amzn2023cis_config_aide
      - amzn2023cis_rule_1_3_1
  tags:
      - level1-server
      - aide
      - patch
      - rule_1.3.1
      - nist_sp800-53r5_AU-2

- name: "1.3.2 | PATCH | Ensure filesystem integrity is regularly checked"
  ansible.builtin.cron:
      name: Run AIDE integrity check
      cron_file: "{{ amzn2023cis_aide_cron['cron_file'] }}"
      user: "{{ amzn2023cis_aide_cron['cron_user'] }}"
      minute: "{{ amzn2023cis_aide_cron['aide_minute'] | default('0') }}"
      hour: "{{ amzn2023cis_aide_cron['aide_hour'] | default('5') }}"
      day: "{{ amzn2023cis_aide_cron['aide_day'] | default('*') }}"
      month: "{{ amzn2023cis_aide_cron['aide_month'] | default('*') }}"
      weekday: "{{ amzn2023cis_aide_cron['aide_weekday'] | default('*') }}"
      job: "{{ amzn2023cis_aide_cron['aide_job'] }}"
  when:
      - amzn2023cis_rule_1_3_2
      - amzn2023cis_config_aide 
  tags:
      - level1-server
      - aide
      - file_integrity
      - patch
      - rule_1.3.2
      - nist_sp800-53r5_AU-2

- name: "1.3.3 | PATCH | Ensure cryptographic mechanisms are used to protect the integrity of audit tools"
  ansible.builtin.blockinfile:
      path: /etc/aide.conf
      marker: "# {mark} Audit tools - CIS benchmark - Ansible-lockdown"
      block: |
        /sbin/auditctl p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/auditd p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/augenrules p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/aureport p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/ausearch p+i+n+u+g+s+b+acl+xattrs+sha512
        /sbin/autrace p+i+n+u+g+s+b+acl+xattrs+sha512
      validate: aide -D --config %s
  when:
      - amzn2023cis_rule_1_3_3
      - amzn2023cis_config_aide
  tags:
      - level1-server
      - aide
      - file_integrity
      - patch
      - rule_1.3.3
      - nist_sp800-53r5_AU-2


#####1.4.x patching permissions for bootloader
- name: "1.4.1 | PATCH | Ensure permissions on bootloader config are configured"
  block:
      - name: "1.4.1 | PATCH | Ensure permissions on bootloader config are configured | bios boot"
        ansible.builtin.file:
            path: "/boot/grub2/{{ item.path }}"
            owner: root
            group: root
            mode: "{{ item.mode }}"
            state: touch
            modification_time: preserve
            access_time: preserve
        loop:
            - { path: 'grub.cfg', mode: '0700' }
            - { path: 'grubenv', mode: '0600' }
            - { path: 'user.cfg', mode: '0600' }
        when: amzn2023cis_legacy_boot

      - name: "1.4.1 | PATCH | Ensure permissions on bootloader config are configured | efi boot"
        ansible.builtin.lineinfile:
            path: /etc/fstab
            regexp: '(.*\/boot\/efi\s+vfat\s+defaults,.*)umask=00\d\d,(fmask=\d\d\d\d,|)(.*$)'
            backrefs: true
            line: '\1umask=0027,fmask=0077,\3'
        when: not amzn2023cis_legacy_boot
  when:
      - amzn2023cis_rule_1_4_1
  tags:
      - level1-server
      - grub
      - patch
      - rule_1.4.1


##### 1.5.x Patching aslr, ptrace, and coredump enabled of disabled.

- name: "1.5.1 | PATCH | Ensure address space layout randomization (ASLR) is enabled"
  block:
      - name: "1.5.1 | PATCH | Ensure address space layout randomization (ASLR) is enabled"
        ansible.builtin.set_fact:
            amzn2023cis_sysctl_update: true

      - name: "1.5.1 | PATCH | Ensure address space layout randomization (ASLR) is enabled"
        ansible.builtin.debug:
            msg: "Control being set via Handler 'update sysctl' which writes to /etc/sysctl.d/60-kernel_sysctl.conf"
  when:
      - amzn2023cis_rule_1_5_1
  tags:
      - level1-server
      - patch
      - sysctl
      - rule_1.5.1
      - nist_sp800-53r5_CM-6

- name: "1.5.2 | PATCH | Ensure ptrace_scope is restricted"
  block:
      - name: "1.5.2 | PATCH | Ensure ptrace_scope is restricted"
        ansible.builtin.set_fact:
            amzn2023cis_sysctl_update: true

      - name: "1.5.2 | PATCH | Ensure ptrace_scope is restricted"
        ansible.builtin.debug:
            msg: "Control being set via Handler 'update sysctl' which writes to /etc/sysctl.d/60-kernel_sysctl.conf"
  when:
      - amzn2023cis_rule_1_5_2
  tags:
      - level1-server
      - patch
      - sysctl
      - rule_1.5.2
      - nist_sp800-53r5_CM-6

- name: "1.5.3 | PATCH | Ensure core dump storage is disabled"
  ansible.builtin.lineinfile:
      path: /etc/systemd/coredump.conf
      regexp: '^Storage\s*=\s*(?!none).*'
      line: 'Storage=none'
  notify: Systemd daemon reload
  when:
      - amzn2023cis_rule_1_5_3
      - systemd_coredump.stat.exists
  tags:
      - level1-server
      - patch
      - rule_1.5.3
      - nist_sp800-53r5_CM-7

- name: "1.5.4 | PATCH | Ensure core dump backtraces are disabled"
  ansible.builtin.lineinfile:
      path: /etc/systemd/coredump.conf
      regexp: '^ProcessSizeMax\s*=\s*.*[1-9]$'
      line: 'ProcessSizeMax=0'
  when:
      - amzn2023cis_rule_1_5_4
  tags:
      - level1-server
      - patch
      - sysctl
      - rule_1.5.4
      - nist_sp800-53r5_CM-6

### 1.6.1.x Checking patches for SElinux and other services
- name: "1.6.1.1 | PATCH | Ensure SELinux is installed"
  ansible.builtin.package:
      name: libselinux
      state: present
  when:
      - amzn2023cis_rule_1_6_1_1
      - not amzn2023cis_selinux_disable
  tags:
      - level1-server
      - patch
      - rule_1.6.1.1
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.6.1.2 | PATCH | Ensure SELinux is not disabled in bootloader configuration"
  ansible.builtin.replace:
      path: /etc/default/grub
      regexp: '{{ item }}'
      replace: ''
  loop:
      - selinux=0
      - enforcing=0
  register: selinux_grub_patch
  ignore_errors: true  # noqa ignore-errors
  notify: Grub2cfg
  when:
      - amzn2023cis_rule_1_6_1_2
      - not amzn2023cis_selinux_disable
  tags:
      - level1-server
      - scored
      - patch
      - rule_1.6.1.2
      - nist_sp800-53r5_SI-7

# State set to enforcing because control 1.6.1.5 requires enforcing to be set
- name: "1.6.1.3 | PATCH | Ensure SELinux policy is configured"
  ansible.posix.selinux:
      conf: /etc/selinux/config
      policy: "{{ amzn2023cis_selinux_pol }}"
      state: "{{ amzn2023cis_selinux_enforce }}"
  when:
      - not amzn2023cis_selinux_disable
      - amzn2023cis_rule_1_6_1_3
  tags:
      - level1-server
      - selinux
      - patch
      - rule_1.6.1.3
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.6.1.4 | PATCH | Ensure the SELinux state is not disabled"
  ansible.posix.selinux:
      conf: /etc/selinux/config
      policy: "{{ amzn2023cis_selinux_pol }}"
      state: "{{ amzn2023cis_selinux_enforce }}"
  when:
      - not amzn2023cis_selinux_disable
      - amzn2023cis_rule_1_6_1_4
  tags:
      - level1-server
      - selinux
      - patch
      - rule_1.6.1.4
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.6.1.6 | AUDIT | Ensure no unconfined services exist"
  block:
      - name: "1.6.1.6 | AUDIT | Ensure no unconfined services exist | Find the unconfined services"
        ansible.builtin.shell: ps -eZ | grep unconfined_service_t | egrep -vw "tr|ps|egrep|bash|awk" | tr ':' ' ' | awk '{ print $NF }'
        register: amzn2023cis_1_6_1_6_unconf_services
        failed_when: false
        changed_when: false

      - name: "1.6.1.6 | AUDIT | Ensure no unconfined services exist | Message on unconfined services"
        ansible.builtin.debug:
            msg: "Warning!! You have unconfined services: {{ amzn2023cis_1_6_1_6_unconf_services.stdout_lines }}"
        when: amzn2023cis_1_6_1_6_unconf_services.stdout | length > 0

      - name: "1.6.1.6 | AUDIT | Ensure no unconfined services exist | warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: amzn2023cis_1_6_1_6_unconf_services.stdout | length > 0
  vars:
      warn_control_id: '1.6.1.6'
  when:
      - amzn2023cis_rule_1_6_1_6
      - not amzn2023cis_selinux_disable
  tags:
      - level1-server
      - audit
      - services
      - rule_1.6.1.6
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.6.1.7 | PATCH | Ensure SETroubleshoot is not installed"
  ansible.builtin.package:
      name: setroubleshoot
      state: absent
  when:
      - amzn2023cis_rule_1_6_1_7
      - not amzn2023cis_selinux_disable
      - "'setroubleshoot' in ansible_facts.packages"
  tags:
      - level1-server
      - selinux
      - patch
      - rule_1.6.1.7
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.6.1.8 | PATCH | Ensure the MCS Translation Service (mcstrans) is not installed"
  ansible.builtin.package:
      name: mcstrans
      state: absent
  when:
      - amzn2023cis_rule_1_6_1_8
      - not amzn2023cis_selinux_disable
  tags:
      - level1-server
      - patch
      - rule_1.6.1.8
      - nist_sp800-53r5_SI-4

####1.7.x patching for message and warning banner
- name: "1.7.1 | PATCH | Ensure message of the day is configured properly"
  ansible.builtin.template:
      src: etc/motd.j2
      dest: /etc/motd
      owner: root
      group: root
      mode: '0644'
  when:
      - amzn2023cis_rule_1_7_1
  tags:
      - level1-server
      - banner
      - patch
      - rule_1.7.1
      - nist_sp800-53r5_CM-3

- name: "1.7.2 | PATCH | Ensure local login warning banner is configured properly"
  ansible.builtin.template:
      src: etc/issue.j2
      dest: /etc/issue
      owner: root
      group: root
      mode: '0644'
  when:
      - amzn2023cis_rule_1_7_2
  tags:
      - level1-server
      - patch
      - rule_1.7.2
      - nist_sp800-53r5_CM-1
      - nist_sp800-53r5_CM-3
      - nist_sp800-53r5_CM-6

- name: "1.7.3 | PATCH | Ensure remote login warning banner is configured properly"
  ansible.builtin.template:
      src: etc/issue.net.j2
      dest: /etc/issue.net
      owner: root
      group: root
      mode: '0644'
  when:
      - amzn2023cis_rule_1_7_3
  tags:
      - level1-server
      - banner
      - patch
      - rule_1.7.3
      - nist_sp800-53r5_CM-1
      - nist_sp800-53r5_CM-3
      - nist_sp800-53r5_CM-6

- name: "1.7.4 | PATCH | Ensure permissions on /etc/motd are configured"
  ansible.builtin.file:
      path: /etc/motd
      owner: root
      group: root
      mode: '0644'
  when:
      - amzn2023cis_rule_1_7_4
  tags:
      - level1-server
      - perms
      - patch
      - rule_1.7.4
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.7.5 | PATCH | Ensure permissions on /etc/issue are configured"
  ansible.builtin.file:
      path: /etc/issue
      owner: root
      group: root
      mode: '0644'
  when:
      - amzn2023cis_rule_1_7_5
  tags:
      - level1-server
      - perms
      - patch
      - rule_1.7.5
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

- name: "1.7.6 | PATCH | Ensure permissions on /etc/issue.net are configured"
  ansible.builtin.file:
      path: /etc/issue.net
      owner: root
      group: root
      mode: '0644'
  when:
      - amzn2023cis_rule_1_7_6
  tags:
      - level1-server
      - perms
      - patch
      - rule_1.7.6
      - nist_sp800-53r5_AC-3
      - nist_sp800-53r5_MP-2

##### 1.8 patching updates for additional software
- name: "1.8 | PATCH | Ensure updates, patches, and additional security software are installed"
  ansible.builtin.package:
      name: "*"
      state: latest
  notify: Change_requires_reboot
  when:
      - amzn2023cis_rule_1_8
  tags:
      - level1-server
      - patch
      - rule_1.8
      - nist_sp800-53r5_SI-2

#####1.9 crypto policy patching
- name: "1.9 | PATCH | Ensure system-wide crypto policy is not legacy"
  block:
      - name: "1.9 | PATCH | Ensure system-wide crypto policy is not legacy | set_fact"
        ansible.builtin.set_fact:
            amzn2023cis_full_crypto_policy: "{{ amzn2023cis_crypto_policy }}{% if amzn2023cis_crypto_policy_module | length > 0 %}:{{ amzn2023cis_crypto_policy_module }}{% endif %}"

      - name: "1.9 | PATCH | Ensure system-wide crypto policy is not legacy"
        ansible.builtin.shell: |
            update-crypto-policies --set "{{ amzn2023cis_full_crypto_policy }}"
            update-crypto-policies
        notify: Change_requires_reboot
        when:
            - amzn2023cis_system_wide_crypto_policy.stdout != amzn2023cis_full_crypto_policy
  when:
      - amzn2023cis_rule_1_9

  tags:
      - level1-server
      - automated
      - patch
      - rule_1.9
      - nist_sp800-53r5_SC-8